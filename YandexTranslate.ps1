<#
    .NOTES
    --------------------------------------------------------------------------------
     Generated on:       25.05.2016 9:16
     Generated by:       Kirill Pashkov
    --------------------------------------------------------------------------------
#>


#region Source: Startup.pss
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
	Param ([String]$Commandline)
	#Note: This function starts the application
	#Note: $Commandline contains the complete argument string passed to the packager 
	#Note: To get the script directory in the Packager use: Split-Path $hostinvocation.MyCommand.path
	#Note: To get the console output in the Packager (Forms Mode) use: $ConsoleOutput (Type: System.Collections.ArrayList)
	#TODO: Initialize and add Function calls to forms
	
	if((Call-MainForm_psf) -eq "OK")
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}






#endregion Source: Startup.pss

#region Source: MainForm.psf
function Call-MainForm_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$tabcontrol1 = New-Object 'System.Windows.Forms.TabControl'
	$tabpage1 = New-Object 'System.Windows.Forms.TabPage'
	$splitter1 = New-Object 'System.Windows.Forms.Splitter'
	$groupbox6 = New-Object 'System.Windows.Forms.GroupBox'
	$trackbar2 = New-Object 'System.Windows.Forms.TrackBar'
	$richtextbox2 = New-Object 'System.Windows.Forms.RichTextBox'
	$groupbox4 = New-Object 'System.Windows.Forms.GroupBox'
	$richtextbox1 = New-Object 'System.Windows.Forms.RichTextBox'
	$trackbar1 = New-Object 'System.Windows.Forms.TrackBar'
	$groupbox5 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonStartJob = New-Object 'System.Windows.Forms.Button'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$combobox2 = New-Object 'System.Windows.Forms.ComboBox'
	$combobox1 = New-Object 'System.Windows.Forms.ComboBox'
	$tabpage2 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox3 = New-Object 'System.Windows.Forms.GroupBox'
	$labelКодировка = New-Object 'System.Windows.Forms.Label'
	$combobox3 = New-Object 'System.Windows.Forms.ComboBox'
	$checkboxИспользоватьПрокси = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxСохранитьНастройки = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxПоверхВсехОкон = New-Object 'System.Windows.Forms.CheckBox'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$imagelistButtonBusyAnimation = New-Object 'System.Windows.Forms.ImageList'
	$timerJobTracker = New-Object 'System.Windows.Forms.Timer'
	$tooltip1 = New-Object 'System.Windows.Forms.ToolTip'
	$timer1 = New-Object 'System.Windows.Forms.Timer'
	$imagelist1 = New-Object 'System.Windows.Forms.ImageList'
	$contextmenustrip1 = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$очиститьToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$OnLoadFormEvent = {
		if (-not (Test-Path 'HKCU:\Software\PK-Tools\Yandex Translate'))
		{
			New-RegistryKeys -New
		}
		Set-TranslateLanguage
		Get-Encoding
		Load-Registry
		Set-TopMost
		& $trackbar1_Scroll
		& $trackbar2_Scroll
		Check-Updates
		$richtextbox1.Select()
	}
	$combobox1_SelectedIndexChanged = {
		Set-AvailableTranslateLanguage
	}
	$checkboxПоверхВсехОкон_CheckedChanged = {
	Set-TopMost
		
	}
	
	$formMain_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
		Set-Registry
		Stop-JobTracker
	}
	
	$timerJobTracker_Tick = {
		Update-JobTracker
	}
	
	$JobTrackerList = New-Object System.Collections.ArrayList
	
	$buttonStartJob_Click = {
		if ($richtextbox1.Text.Trim() -ne '')
		{
			$buttonStartJob.Enabled = $false
			$groupbox1.Enabled = $false
			$richtextbox1.Enabled = $false
			$richtextbox2.Enabled = $false
			$tabpage2.Enabled = $false
			$richtextbox2.Clear()
			$proxy = $($checkboxИспользоватьПрокси.Checked)
			$encode = $($combobox3.SelectedItem)
			$api_key = $($textbox1.Text.Trim())
			$text = $($richtextbox1.Text.Trim())
			if ($label1.ImageIndex -eq 1)
			{
				$from = $Languages.Item($($combobox1.SelectedItem))
				$to = $Languages.Item($($combobox2.SelectedItem))
			}
			else
			{
				$to = $Languages.Item($($combobox1.SelectedItem))
				$from = $Languages.Item($($combobox2.SelectedItem))
			}
			$downloadstring = "https://translate.yandex.net/api/v1.5/tr/translate?key=$api_key&text=$text&lang=$from-$to&; [format=plain]"
			$arguments = $proxy, $encode, $downloadstring
			Add-JobTracker -Name "Translate" `
						   -JobScript {
				Param ($1, $2, $3)
				$WebRequest = New-Object -TypeName System.Net.WebClient
				if ($1 -eq $true)
				{
					$WebRequest.UseDefaultCredentials = $true
					$WebRequest.Proxy.Credentials = $WebRequest.Credentials
					
				}
				$WebRequest.Encoding = [System.Text.Encoding]::$2
				$WebAnswer = $WebRequest.DownloadString($3)
				Write-Output $WebAnswer
				$WebRequest.Dispose()
			}`
						   -CompletedScript {
				Param ($Job)
				$results = Receive-Job -Job $Job
				$converted = $($results -as [xml])
				switch ($converted.Translation.code)
				{
					200 { }
					401 { Invoke-MessageBox -Caption Ошибка -Text 'Неправильный ключ API' }
					402 { Invoke-MessageBox -Caption Ошибка -Text 'Ключ API заблокирован' }
					403 { Invoke-MessageBox -Caption Ошибка -Text 'Превышено суточное ограничение на количество запросов' }
					404 { Invoke-MessageBox -Caption Ошибка -Text 'Превышено суточное ограничение на объем переведенного текста' }
					413 { Invoke-MessageBox -Caption Ошибка -Text 'Превышен максимально допустимый размер текста' }
					422 { Invoke-MessageBox -Caption Ошибка -Text 'Текст не может быть переведен' }
					501 { Invoke-MessageBox -Caption Ошибка -Text 'Заданное направление перевода не поддерживается' }
					default { Invoke-MessageBox -Caption Ошибка -Text "Ошибка получения данных.`n`nПроверьте:`n`n- Наличие подключения.`n- Необходимость использования прокси.`n- Корректность ключа API.`n- Используемую кодировку." }
				}
				$richtextbox2.AppendText($converted.Translation.text)
				#Enable the Button
				$buttonStartJob.ImageIndex = -1
				$tabpage2.Enabled = $true
				$groupbox1.Enabled = $true
				$richtextbox1.Enabled = $true
				$richtextbox2.Enabled = $true
				$buttonStartJob.Enabled = $true
			}`
						   -UpdateScript {
				Param ($Job)
				#$results = Receive-Job -Job $Job -Keep
				#Animate the Button
				if ($buttonStartJob.ImageList -ne $null)
				{
					if ($buttonStartJob.ImageIndex -lt $buttonStartJob.ImageList.Images.Count - 1)
					{
						$buttonStartJob.ImageIndex += 1
					}
					else
					{
						$buttonStartJob.ImageIndex = 0
					}
				}
			} -ArgumentList $arguments
		}
		else
		{
			$richtextbox1.BackColor = 'LightCoral'
			$richtextbox1.Select()
			$timer1.Start()
		}
	}
	$trackbar1_Scroll = {
		$richtextbox1.Font = New-Object -TypeName System.Drawing.Font('Microsoft Sans Serif', $($trackbar1.Value))
		$richtextbox1.Select()
	}
	
	$trackbar2_Scroll = {
		$richtextbox2.Font = New-Object -TypeName System.Drawing.Font('Microsoft Sans Serif', $($trackbar2.Value))
		$richtextbox2.Select()
	}
	$timer1_Tick={
		$richtextbox1.BackColor = 'Window'
		$timer1.Stop()
	}
	
	$label1_Click = {
		if ($label1.ImageIndex -eq 1)
		{ $label1.ImageIndex = 0 }
		else { $label1.ImageIndex = 1 }
	}
	
	$richtextbox1_PreviewKeyDown = [System.Windows.Forms.PreviewKeyDownEventHandler]{
		if ($_.Control -eq $true -and $_.KeyCode -eq [System.Windows.Forms.Keys]::Enter)
		{
			& $buttonStartJob_Click
		}
	}
	$очиститьToolStripMenuItem_Click={
		$richtextbox1.Clear()
		$richtextbox2.Clear()
	}
	$trackbar1_MouseHover={
		$tooltip1.SetToolTip($this, ('Размер шрифта: '+ $this.Value))
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_trackbar2 = $trackbar2.Value
		$script:MainForm_richtextbox2 = $richtextbox2.Text
		$script:MainForm_richtextbox1 = $richtextbox1.Text
		$script:MainForm_trackbar1 = $trackbar1.Value
		$script:MainForm_combobox2_SelectedItem = $combobox2.SelectedItems
		$script:MainForm_combobox1_SelectedItem = $combobox1.SelectedItems
		$script:MainForm_combobox3_SelectedItem = $combobox3.SelectedItems
		$script:MainForm_checkboxИспользоватьПрокси = $checkboxИспользоватьПрокси.Checked
		$script:MainForm_checkboxСохранитьНастройки = $checkboxСохранитьНастройки.Checked
		$script:MainForm_checkboxПоверхВсехОкон = $checkboxПоверхВсехОкон.Checked
		$script:MainForm_textbox1 = $textbox1.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$trackbar2.remove_Scroll($trackbar2_Scroll)
			$trackbar2.remove_MouseHover($trackbar1_MouseHover)
			$richtextbox1.remove_PreviewKeyDown($richtextbox1_PreviewKeyDown)
			$trackbar1.remove_Scroll($trackbar1_Scroll)
			$trackbar1.remove_MouseHover($trackbar1_MouseHover)
			$buttonStartJob.remove_Click($buttonStartJob_Click)
			$label1.remove_Click($label1_Click)
			$combobox1.remove_SelectedIndexChanged($combobox1_SelectedIndexChanged)
			$checkboxПоверхВсехОкон.remove_CheckedChanged($checkboxПоверхВсехОкон_CheckedChanged)
			$MainForm.remove_FormClosed($formMain_FormClosed)
			$MainForm.remove_Load($OnLoadFormEvent)
			$timerJobTracker.remove_Tick($timerJobTracker_Tick)
			$timer1.remove_Tick($timer1_Tick)
			$очиститьToolStripMenuItem.remove_Click($очиститьToolStripMenuItem_Click)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$tabcontrol1.SuspendLayout()
	$tabpage1.SuspendLayout()
	$groupbox6.SuspendLayout()
	$trackbar2.BeginInit()
	$groupbox4.SuspendLayout()
	$trackbar1.BeginInit()
	$groupbox5.SuspendLayout()
	$groupbox1.SuspendLayout()
	$tabpage2.SuspendLayout()
	$groupbox3.SuspendLayout()
	$groupbox2.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($tabcontrol1)
	$MainForm.ClientSize = '334, 312'
	$MainForm.MinimumSize = '350, 350'
	$MainForm.Name = "MainForm"
	$MainForm.ShowIcon = $False
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = "Яндекс переводчик"
	$MainForm.add_FormClosed($formMain_FormClosed)
	$MainForm.add_Load($OnLoadFormEvent)
	#
	# tabcontrol1
	#
	$tabcontrol1.Controls.Add($tabpage1)
	$tabcontrol1.Controls.Add($tabpage2)
	$tabcontrol1.Dock = 'Fill'
	$tabcontrol1.Location = '0, 0'
	$tabcontrol1.Name = "tabcontrol1"
	$tabcontrol1.SelectedIndex = 0
	$tabcontrol1.Size = '334, 312'
	$tabcontrol1.TabIndex = 0
	#
	# tabpage1
	#
	$tabpage1.Controls.Add($splitter1)
	$tabpage1.Controls.Add($groupbox6)
	$tabpage1.Controls.Add($groupbox4)
	$tabpage1.Controls.Add($groupbox5)
	$tabpage1.Controls.Add($groupbox1)
	$tabpage1.BackColor = 'Control'
	$tabpage1.Font = "Microsoft Sans Serif, 8.25pt"
	$tabpage1.Location = '4, 22'
	$tabpage1.Name = "tabpage1"
	$tabpage1.Padding = '3, 3, 3, 3'
	$tabpage1.Size = '326, 286'
	$tabpage1.TabIndex = 0
	$tabpage1.Text = "Переводчик"
	#
	# splitter1
	#
	$splitter1.Cursor = "SizeNS"
	$splitter1.Dock = 'Top'
	$splitter1.Location = '3, 142'
	$splitter1.Name = "splitter1"
	$splitter1.RightToLeft = 'Yes'
	$splitter1.Size = '320, 2'
	$splitter1.TabIndex = 4
	$splitter1.TabStop = $False
	#
	# groupbox6
	#
	$groupbox6.Controls.Add($trackbar2)
	$groupbox6.Controls.Add($richtextbox2)
	$groupbox6.Dock = 'Fill'
	$groupbox6.Location = '3, 142'
	$groupbox6.Name = "groupbox6"
	$groupbox6.Size = '320, 105'
	$groupbox6.TabIndex = 3
	$groupbox6.TabStop = $False
	$groupbox6.Text = "Перевод"
	#
	# trackbar2
	#
	$trackbar2.AutoSize = $False
	$trackbar2.Dock = 'Right'
	$trackbar2.Location = '302, 16'
	$trackbar2.Maximum = 72
	$trackbar2.Minimum = 8
	$trackbar2.Name = "trackbar2"
	$trackbar2.Orientation = 'Vertical'
	$trackbar2.Size = '15, 86'
	$trackbar2.TabIndex = 0
	$trackbar2.TickStyle = 'None'
	$trackbar2.Value = 8
	$trackbar2.add_Scroll($trackbar2_Scroll)
	$trackbar2.add_MouseHover($trackbar1_MouseHover)
	#
	# richtextbox2
	#
	$richtextbox2.ContextMenuStrip = $contextmenustrip1
	$richtextbox2.Dock = 'Fill'
	$richtextbox2.Location = '3, 16'
	$richtextbox2.Name = "richtextbox2"
	$richtextbox2.ReadOnly = $True
	$richtextbox2.Size = '314, 86'
	$richtextbox2.TabIndex = 1
	$richtextbox2.Text = ""
	#
	# groupbox4
	#
	$groupbox4.Controls.Add($richtextbox1)
	$groupbox4.Controls.Add($trackbar1)
	$groupbox4.Dock = 'Top'
	$groupbox4.Location = '3, 43'
	$groupbox4.Name = "groupbox4"
	$groupbox4.Size = '320, 99'
	$groupbox4.TabIndex = 1
	$groupbox4.TabStop = $False
	$groupbox4.Text = "Переводимый текст"
	#
	# richtextbox1
	#
	$richtextbox1.ContextMenuStrip = $contextmenustrip1
	$richtextbox1.Dock = 'Fill'
	$richtextbox1.Location = '3, 16'
	$richtextbox1.Name = "richtextbox1"
	$richtextbox1.Size = '299, 80'
	$richtextbox1.TabIndex = 0
	$richtextbox1.Text = ""
	$richtextbox1.add_PreviewKeyDown($richtextbox1_PreviewKeyDown)
	#
	# trackbar1
	#
	$trackbar1.AutoSize = $False
	$trackbar1.Dock = 'Right'
	$trackbar1.Location = '302, 16'
	$trackbar1.Maximum = 72
	$trackbar1.Minimum = 8
	$trackbar1.Name = "trackbar1"
	$trackbar1.Orientation = 'Vertical'
	$trackbar1.Size = '15, 80'
	$trackbar1.TabIndex = 1
	$trackbar1.TickStyle = 'None'
	$trackbar1.Value = 8
	$trackbar1.add_Scroll($trackbar1_Scroll)
	$trackbar1.add_MouseHover($trackbar1_MouseHover)
	#
	# groupbox5
	#
	$groupbox5.Controls.Add($buttonStartJob)
	$groupbox5.Dock = 'Bottom'
	$groupbox5.Location = '3, 247'
	$groupbox5.Name = "groupbox5"
	$groupbox5.Size = '320, 36'
	$groupbox5.TabIndex = 2
	$groupbox5.TabStop = $False
	#
	# buttonStartJob
	#
	$buttonStartJob.Dock = 'Bottom'
	$buttonStartJob.ImageList = $imagelistButtonBusyAnimation
	$buttonStartJob.Location = '3, 9'
	$buttonStartJob.Name = "buttonStartJob"
	$buttonStartJob.Size = '314, 24'
	$buttonStartJob.TabIndex = 0
	$buttonStartJob.Text = "Перевести"
	$buttonStartJob.TextImageRelation = 'ImageBeforeText'
	$buttonStartJob.UseVisualStyleBackColor = $True
	$buttonStartJob.add_Click($buttonStartJob_Click)
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($label1)
	$groupbox1.Controls.Add($combobox2)
	$groupbox1.Controls.Add($combobox1)
	$groupbox1.BackColor = 'Control'
	$groupbox1.Dock = 'Top'
	$groupbox1.FlatStyle = 'Flat'
	$groupbox1.Location = '3, 3'
	$groupbox1.Name = "groupbox1"
	$groupbox1.Size = '320, 40'
	$groupbox1.TabIndex = 0
	$groupbox1.TabStop = $False
	$groupbox1.Text = "Направление перевода"
	#
	# label1
	#
	$label1.Anchor = 'Top, Bottom'
	$label1.BackColor = 'Control'
	$label1.ImageIndex = 1
	$label1.ImageList = $imagelist1
	$label1.Location = '139, 9'
	$label1.Name = "label1"
	$label1.Size = '42, 26'
	$label1.TabIndex = 2
	$tooltip1.SetToolTip($label1, "Направление перевода")
	$label1.add_Click($label1_Click)
	#
	# combobox2
	#
	$combobox2.Anchor = 'Top, Bottom, Right'
	$combobox2.DropDownStyle = 'DropDownList'
	$combobox2.FormattingEnabled = $True
	$combobox2.Location = '184, 13'
	$combobox2.Name = "combobox2"
	$combobox2.Size = '130, 21'
	$combobox2.TabIndex = 1
	#
	# combobox1
	#
	$combobox1.Anchor = 'Top, Bottom, Left'
	$combobox1.DropDownStyle = 'DropDownList'
	$combobox1.FormattingEnabled = $True
	$combobox1.Location = '6, 13'
	$combobox1.Name = "combobox1"
	$combobox1.Size = '130, 21'
	$combobox1.TabIndex = 0
	$combobox1.add_SelectedIndexChanged($combobox1_SelectedIndexChanged)
	#
	# tabpage2
	#
	$tabpage2.Controls.Add($groupbox3)
	$tabpage2.Controls.Add($groupbox2)
	$tabpage2.BackColor = 'Control'
	$tabpage2.Location = '4, 22'
	$tabpage2.Name = "tabpage2"
	$tabpage2.Padding = '3, 3, 3, 3'
	$tabpage2.Size = '326, 286'
	$tabpage2.TabIndex = 1
	$tabpage2.Text = "Конфигурация"
	#
	# groupbox3
	#
	$groupbox3.Controls.Add($labelКодировка)
	$groupbox3.Controls.Add($combobox3)
	$groupbox3.Controls.Add($checkboxИспользоватьПрокси)
	$groupbox3.Controls.Add($checkboxСохранитьНастройки)
	$groupbox3.Controls.Add($checkboxПоверхВсехОкон)
	$groupbox3.BackColor = 'Control'
	$groupbox3.Dock = 'Fill'
	$groupbox3.Location = '3, 53'
	$groupbox3.Name = "groupbox3"
	$groupbox3.Size = '320, 230'
	$groupbox3.TabIndex = 1
	$groupbox3.TabStop = $False
	#
	# labelКодировка
	#
	$labelКодировка.Location = '6, 16'
	$labelКодировка.Name = "labelКодировка"
	$labelКодировка.Size = '65, 23'
	$labelКодировка.TabIndex = 4
	$labelКодировка.Text = "Кодировка"
	$labelКодировка.TextAlign = 'MiddleLeft'
	#
	# combobox3
	#
	$combobox3.DropDownStyle = 'DropDownList'
	$combobox3.FormattingEnabled = $True
	$combobox3.Location = '77, 16'
	$combobox3.Name = "combobox3"
	$combobox3.Size = '86, 21'
	$combobox3.TabIndex = 3
	#
	# checkboxИспользоватьПрокси
	#
	$checkboxИспользоватьПрокси.Location = '169, 14'
	$checkboxИспользоватьПрокси.Name = "checkboxИспользоватьПрокси"
	$checkboxИспользоватьПрокси.Size = '148, 24'
	$checkboxИспользоватьПрокси.TabIndex = 2
	$checkboxИспользоватьПрокси.Text = "Использовать прокси"
	$checkboxИспользоватьПрокси.UseVisualStyleBackColor = $True
	#
	# checkboxСохранитьНастройки
	#
	$checkboxСохранитьНастройки.Location = '169, 68'
	$checkboxСохранитьНастройки.Name = "checkboxСохранитьНастройки"
	$checkboxСохранитьНастройки.Size = '148, 24'
	$checkboxСохранитьНастройки.TabIndex = 1
	$checkboxСохранитьНастройки.Text = "Сохранить настройки"
	$checkboxСохранитьНастройки.UseVisualStyleBackColor = $True
	#
	# checkboxПоверхВсехОкон
	#
	$checkboxПоверхВсехОкон.Location = '169, 41'
	$checkboxПоверхВсехОкон.Name = "checkboxПоверхВсехОкон"
	$checkboxПоверхВсехОкон.Size = '148, 24'
	$checkboxПоверхВсехОкон.TabIndex = 0
	$checkboxПоверхВсехОкон.Text = "Поверх всех окон"
	$checkboxПоверхВсехОкон.UseVisualStyleBackColor = $True
	$checkboxПоверхВсехОкон.add_CheckedChanged($checkboxПоверхВсехОкон_CheckedChanged)
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($textbox1)
	$groupbox2.BackColor = 'Control'
	$groupbox2.Dock = 'Top'
	$groupbox2.Location = '3, 3'
	$groupbox2.Name = "groupbox2"
	$groupbox2.Size = '320, 50'
	$groupbox2.TabIndex = 0
	$groupbox2.TabStop = $False
	$groupbox2.Text = "Ключ API"
	#
	# textbox1
	#
	$textbox1.Dock = 'Fill'
	$textbox1.Location = '3, 16'
	$textbox1.Name = "textbox1"
	$textbox1.Size = '314, 20'
	$textbox1.TabIndex = 0
	#
	# imagelistButtonBusyAnimation
	#
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	#region Binary Data
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAAB2CgAAAk1TRnQBSQFMAgEBCAEAAegBAAHoAQABEAEAARABAAT/ASEBAAj/AUIBTQE2
BwABNgMAASgDAAFAAwABMAMAAQEBAAEgBgABMP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/
AP8AugADwgH/AyUB/wMlAf8DwgH/MAADwgH/A0UB/wOCAf8DwgH/sAADJQH/AwAB/wMAAf8DJQH/
MAADggH/AyUB/wMlAf8DRQH/gAADwgH/AyUB/wMlAf8DwgH/IAADJQH/AwAB/wMAAf8DJQH/A8IB
/wNFAf8DggH/A8IB/xAAA8IB/wMlAf8DJQH/A8IB/wNFAf8DJQH/AyUB/wNFAf8EAAOSAf8DkgH/
A8IB/3AAAyUB/wMAAf8DAAH/AyUB/yAAA8IB/wMlAf8DJQH/A8IB/wOCAf8DJQH/AyUB/wOCAf8Q
AAMlAf8DAAH/AwAB/wMlAf8DwgH/A0UB/wOCAf8DwgH/A5IB/wOCAf8DggH/A5IB/3AAAyUB/wMA
Af8DAAH/AyUB/zAAA0UB/wMlAf8DJQH/A0UB/xAAAyUB/wMAAf8DAAH/AyUB/xAAA5IB/wOSAf8D
kgH/A8IB/3AAA8IB/wMlAf8DJQH/A8IB/zAAA8IB/wNFAf8DggH/A8IB/xAAA8IB/wMlAf8DJQH/
A8IB/xAAA8IB/wOSAf8DkgH/A8IB/zgAA8IB/wMlAf8DJQH/A8IB/zAAA8IB/wOCAf8DRQH/A8IB
/zAAA8IB/wPCAf8DkgH/A8IB/zQAA8IB/wPCAf80AAMlAf8DAAH/AwAB/wMlAf8wAANFAf8DJQH/
AyUB/wNFAf8wAAOSAf8DggH/A4IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf8wAAMlAf8DAAH/AwAB
/wMlAf8wAAOCAf8DJQH/AyUB/wOCAf8wAAPCAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB/wPC
Af8wAAPCAf8DJQH/AyUB/wPCAf8wAAPCAf8DggH/A0UB/wPCAf8wAAPCAf8DkgH/A5IB/wPCAf80
AAPCAf8DwgH/EAADwgH/A8IB/xQAA8IB/wOCAf8DRQH/A8IB/zAAA8IB/wOSAf8DkgH/A8IB/zQA
A8IB/wPCAf9UAAPCAf8DwgH/A8IB/wPCAf8QAANFAf8DJQH/AyUB/wNFAf8wAAOSAf8DggH/A5IB
/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf9QAAPCAf8DwgH/A8IB/wPCAf8DwgH/A8IB/wOSAf8DwgH/
A4IB/wMlAf8DJQH/A4IB/yQAA8IB/wPCAf8EAAPCAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB
/wPCAf9UAAPCAf8DwgH/BAADkgH/A4IB/wOCAf8DkgH/A8IB/wOCAf8DRQH/A8IB/yAAA8IB/wPC
Af8DwgH/A8IB/wPCAf8DkgH/A5IB/wPCAf80AAPCAf8DwgH/ZAADkgH/A5IB/wOSAf8DkgH/MAAD
wgH/A8IB/wPCAf8DwgH/sAADwgH/A5IB/wOSAf8DwgH/NAADwgH/A8IB/7QAA8IB/wPCAf8DkgH/
A8IB/zQAA8IB/wPCAf+0AAOSAf8DggH/A4IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf+gAAPCAf8D
RQH/A4IB/wPCAf8DkgH/A5IB/wOSAf8DwgH/BAADwgH/A8IB/xQAA8IB/wPCAf8DkgH/A8IB/wPC
Af8DwgH/A8IB/wPCAf8kAAPCAf8DwgH/dAADggH/AyUB/wMlAf8DggH/A8IB/wOSAf8DkgH/A8IB
/wPCAf8DwgH/A8IB/wPCAf8QAAOSAf8DggH/A4IB/wOSAf8EAAPCAf8DwgH/JAADwgH/A8IB/wPC
Af8DwgH/cAADRQH/AyUB/wMlAf8DggH/EAADwgH/A8IB/wPCAf8DwgH/EAADkgH/A5IB/wOSAf8D
kgH/MAADwgH/A8IB/wPCAf8DwgH/cAADwgH/A0UB/wNFAf8DwgH/FAADwgH/A8IB/xQAA8IB/wOS
Af8DkgH/A8IB/zQAA8IB/wPCAf9sAAPCAf8DJQH/AyUB/wPCAf8wAAPCAf8DRQH/A4IB/wPCAf8w
AAPCAf8DwgH/A5IB/wPCAf80AAPCAf8DwgH/NAADJQH/AwAB/wMAAf8DJQH/MAADggH/AyUB/wMl
Af8DRQH/MAADkgH/A4IB/wOCAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/MAADJQH/AwAB/wMAAf8D
JQH/MAADRQH/AyUB/wMlAf8DggH/MAADkgH/A5IB/wOSAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/
MAADwgH/AyUB/wMlAf8DwgH/MAADwgH/A0UB/wNFAf8DwgH/MAADwgH/A5IB/wOSAf8DwgH/NAAD
wgH/A8IB/3wAA8IB/wMlAf8DJQH/A8IB/zAAA8IB/wNFAf8DggH/A8IB/zAAA8IB/wPCAf8DkgH/
A8IB/xAAA8IB/wMlAf8DJQH/A8IB/1AAAyUB/wMAAf8DAAH/AyUB/zAAA4IB/wMlAf8DJQH/A0UB
/zAAA5IB/wOCAf8DggH/A5IB/xAAAyUB/wMAAf8DAAH/AyUB/1AAAyUB/wMAAf8DAAH/AyUB/zAA
A0UB/wMlAf8DJQH/A4IB/wOSAf8DJQH/AyUB/wPCAf8gAAOSAf8DkgH/A5IB/wOSAf8DwgH/A0UB
/wOCAf8DwgH/AyUB/wMAAf8DAAH/AyUB/1AAA8IB/wMlAf8DJQH/A8IB/zAAA8IB/wOCAf8DRQH/
A8IB/wMlAf8DAAH/AwAB/wMlAf8gAAPCAf8DkgH/A5IB/wPCAf8DggH/AyUB/wMlAf8DRQH/A8IB
/wMlAf8DJQH/A8IB/6AAAyUB/wMAAf8DAAH/AyUB/zAAA0UB/wMlAf8DJQH/A4IB/7AAA8IB/wMl
Af8DJQH/A8IB/zAAA8IB/wOCAf8DRQH/A8IB/xgAAUIBTQE+BwABPgMAASgDAAFAAwABMAMAAQEB
AAEBBQABgAEBFgAD/4EABP8B/AE/AfwBPwT/AfwBPwH8AT8D/wHDAfwBAwHAASMD/wHDAfwBAwHA
AQMD/wHDAf8DwwP/AcMB/wPDAf8B8AH/AfAB/wHwAf8B+QH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B
8AH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B+QHnAcMB/wHDAf8B5wL/AsMB/wHDAf8BwwL/AcABAwH+
AUMB/wHDAv8B5AEDAfwBAwH/AecC/wH8AT8B/AE/BP8B/AE/Af4BfwT/AfwBPwH+AX8E/wH8AT8B
/AE/BP8BwAEnAcABPwHnA/8BwAEDAcIBfwHDA/8DwwH/AcMD/wHDAecBwwH/AecD/wEPAf8BDwH/
AQ8B/wGfAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wGfA/8B
wwH/AcMB/wLDAv8BwwH/AcMB/wLDAv8BwwH/AcABPwHAAQMC/wHDAf8BwAE/AcABAwT/AfwBPwH8
AT8E/wH8AT8B/AE/Cw=='))
	#endregion
	$imagelistButtonBusyAnimation.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$imagelistButtonBusyAnimation.TransparentColor = 'Transparent'
	#
	# timerJobTracker
	#
	$timerJobTracker.add_Tick($timerJobTracker_Tick)
	#
	# tooltip1
	#
	#
	# timer1
	#
	$timer1.add_Tick($timer1_Tick)
	#
	# imagelist1
	#
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	#region Binary Data
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAAAgCgAAAk1TRnQBSQFMAgEBAgEAAVABAAFQAQABIgEAARoBAAT/AQkBAAj/AUIBTQE2
AQQGAAE2AQQCAAEoAwABiAMAARoDAAEBAQABCAUAAdABDRgAAYACAAGAAwACgAEAAYADAAGAAQAB
gAEAAoACAAPAAQABwAHcAcABAAHwAcoBpgEAATMFAAEzAQABMwEAATMBAAIzAgADFgEAAxwBAAMi
AQADKQEAA1UBAANNAQADQgEAAzkBAAGAAXwB/wEAAlAB/wEAAZMBAAHWAQAB/wHsAcwBAAHGAdYB
7wEAAdYC5wEAAZABqQGtAgAB/wEzAwABZgMAAZkDAAHMAgABMwMAAjMCAAEzAWYCAAEzAZkCAAEz
AcwCAAEzAf8CAAFmAwABZgEzAgACZgIAAWYBmQIAAWYBzAIAAWYB/wIAAZkDAAGZATMCAAGZAWYC
AAKZAgABmQHMAgABmQH/AgABzAMAAcwBMwIAAcwBZgIAAcwBmQIAAswCAAHMAf8CAAH/AWYCAAH/
AZkCAAH/AcwBAAEzAf8CAAH/AQABMwEAATMBAAFmAQABMwEAAZkBAAEzAQABzAEAATMBAAH/AQAB
/wEzAgADMwEAAjMBZgEAAjMBmQEAAjMBzAEAAjMB/wEAATMBZgIAATMBZgEzAQABMwJmAQABMwFm
AZkBAAEzAWYBzAEAATMBZgH/AQABMwGZAgABMwGZATMBAAEzAZkBZgEAATMCmQEAATMBmQHMAQAB
MwGZAf8BAAEzAcwCAAEzAcwBMwEAATMBzAFmAQABMwHMAZkBAAEzAswBAAEzAcwB/wEAATMB/wEz
AQABMwH/AWYBAAEzAf8BmQEAATMB/wHMAQABMwL/AQABZgMAAWYBAAEzAQABZgEAAWYBAAFmAQAB
mQEAAWYBAAHMAQABZgEAAf8BAAFmATMCAAFmAjMBAAFmATMBZgEAAWYBMwGZAQABZgEzAcwBAAFm
ATMB/wEAAmYCAAJmATMBAANmAQACZgGZAQACZgHMAQABZgGZAgABZgGZATMBAAFmAZkBZgEAAWYC
mQEAAWYBmQHMAQABZgGZAf8BAAFmAcwCAAFmAcwBMwEAAWYBzAGZAQABZgLMAQABZgHMAf8BAAFm
Af8CAAFmAf8BMwEAAWYB/wGZAQABZgH/AcwBAAHMAQAB/wEAAf8BAAHMAQACmQIAAZkBMwGZAQAB
mQEAAZkBAAGZAQABzAEAAZkDAAGZAjMBAAGZAQABZgEAAZkBMwHMAQABmQEAAf8BAAGZAWYCAAGZ
AWYBMwEAAZkBMwFmAQABmQFmAZkBAAGZAWYBzAEAAZkBMwH/AQACmQEzAQACmQFmAQADmQEAApkB
zAEAApkB/wEAAZkBzAIAAZkBzAEzAQABZgHMAWYBAAGZAcwBmQEAAZkCzAEAAZkBzAH/AQABmQH/
AgABmQH/ATMBAAGZAcwBZgEAAZkB/wGZAQABmQH/AcwBAAGZAv8BAAHMAwABmQEAATMBAAHMAQAB
ZgEAAcwBAAGZAQABzAEAAcwBAAGZATMCAAHMAjMBAAHMATMBZgEAAcwBMwGZAQABzAEzAcwBAAHM
ATMB/wEAAcwBZgIAAcwBZgEzAQABmQJmAQABzAFmAZkBAAHMAWYBzAEAAZkBZgH/AQABzAGZAgAB
zAGZATMBAAHMAZkBZgEAAcwCmQEAAcwBmQHMAQABzAGZAf8BAALMAgACzAEzAQACzAFmAQACzAGZ
AQADzAEAAswB/wEAAcwB/wIAAcwB/wEzAQABmQH/AWYBAAHMAf8BmQEAAcwB/wHMAQABzAL/AQAB
zAEAATMBAAH/AQABZgEAAf8BAAGZAQABzAEzAgAB/wIzAQAB/wEzAWYBAAH/ATMBmQEAAf8BMwHM
AQAB/wEzAf8BAAH/AWYCAAH/AWYBMwEAAcwCZgEAAf8BZgGZAQAB/wFmAcwBAAHMAWYB/wEAAf8B
mQIAAf8BmQEzAQAB/wGZAWYBAAH/ApkBAAH/AZkBzAEAAf8BmQH/AQAB/wHMAgAB/wHMATMBAAH/
AcwBZgEAAf8BzAGZAQAB/wLMAQAB/wHMAf8BAAL/ATMBAAHMAf8BZgEAAv8BmQEAAv8BzAEAAmYB
/wEAAWYB/wFmAQABZgL/AQAB/wJmAQAB/wFmAf8BAAL/AWYBAAEhAQABpQEAA18BAAN3AQADhgEA
A5YBAAPLAQADsgEAA9cBAAPdAQAD4wEAA+oBAAPxAQAD+AEAAfAB+wH/AQABpAKgAQADgAMAAf8C
AAH/AwAC/wEAAf8DAAH/AQAB/wEAAv8CAAP/AQBE9EQARPREABL0AfMf9AHwEfREABD0AfIBEwES
HvQB/wEOAewQ9EQAD/QB8wEOAREB9x70Af8BEQFmAQ8P9EQADfQB/wFtAQAB3AEVIPQBFQK0AQAB
7AH/DPREAAz0AfEBEQGuAtwBDwH/H/QB7AGLAtwBbAFDAfIL9EQAC/QB7AEQAbQC3AHWARMB/xL0
AQcB9wEHAfAB8wj0AfABZgPcAbQBDwHsCvREAAn0AfIB6gFmBNwBrgHsBPQB8wHxAbwCBwGSAesB
EwEQAfMF9AHqARQBFQFDARABDgEPARUBbQHsAe8BBwG8AfEBDwXcAWYBEgHxCPREAAj0AfIBDgGu
BdwBFQHqAW0BQwEOAQADDgFDAWwBzwHWAdwBAAHyBfQB6gEJB9wBtAGuAWYDDgbcAbQBAAG8B/RE
AAb0Af8BbQEAAdYG3AK0AbUBCQrcAQAB8gX0AeoBCRXcAREBQwH/BfREAAX0AfEBEQGuFtwBAAHy
BfQB6gEJFtwBtAEQAe8E9EQABPQB7AERAbQX3AEAAfIF9AHqAQkX3AG0AQAB/wP0RAAE9AHqARUB
tBfcAQAB8gX0AeoBCRbcAbQBEAHvBPREAAX0AfABDgGuFtwBAAHyBfQB6gEJFdwBFQERAf8B8wT0
RAAH9AFtAQ4H3AHWDdwBAAHyBfQB6gEJBtwBtAGuAWwBEQMOBtwBtAEAAe8H9EQACPQBBwERAa4F
3AMVAQ8BDgEQAUMBFQFmAYsBrgG0AtwBAAHyBfQB6gJDAREBDwEOAREBEgHsAfcCBwHwAfIBDwXc
AWYBFQHwCPREAAn0AfIB6gFmBNwBrgHsAf8C9AHzAfABBwH3AuwBbQETAREBDgHyBfQBvAHvAbwB
8Qn0AfEBZgPcAbQBFQHsAfMJ9EQAC/QB9wEOAbQC3AHWARMB/wn0A/8T9AHsAWwC3AG0AQ8B7wv0
RAAM9AH/AhUC3AEPAf8f9AEVAa4B3AEVAUMB/wz0RAAO9AHvAQABtQFmAfMf9AERAbQBAAHvDvRE
AA/0AfEBEAEOAe0e9AH/AQ4BQwHwD/REABH0Auwf9AHsAfMQ9EQARPREAET0RABE9EQAAUIBTQE+
BwABPgMAASgDAAGIAwABGgMAAQEBAAEBBQABCAECFgAD//8A/wALAAs='))
	#endregion
	$imagelist1.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$imagelist1.TransparentColor = 'Transparent'
	#
	# contextmenustrip1
	#
	[void]$contextmenustrip1.Items.Add($очиститьToolStripMenuItem)
	$contextmenustrip1.Name = "contextmenustrip1"
	$contextmenustrip1.ShowImageMargin = $False
	$contextmenustrip1.Size = '36, 4'
	#
	# очиститьToolStripMenuItem
	#
	$очиститьToolStripMenuItem.Name = "очиститьToolStripMenuItem"
	$очиститьToolStripMenuItem.Size = '101, 22'
	$очиститьToolStripMenuItem.Text = "Очистить"
	$очиститьToolStripMenuItem.add_Click($очиститьToolStripMenuItem_Click)
	$groupbox2.ResumeLayout($false)
	$groupbox3.ResumeLayout($false)
	$tabpage2.ResumeLayout($false)
	$groupbox1.ResumeLayout($false)
	$groupbox5.ResumeLayout($false)
	$trackbar1.EndInit()
	$groupbox4.ResumeLayout($false)
	$trackbar2.EndInit()
	$groupbox6.ResumeLayout($false)
	$tabpage1.ResumeLayout($false)
	$tabcontrol1.ResumeLayout($false)
	$MainForm.ResumeLayout($false)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()
}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	$ErrorActionPreference = 'SilentlyContinue'
	$ApplicationVersion = '1.0.0.4'
	$UpdateServer = 'wgo-it000000601'
	$script:Languages = @{
		албанский = 'sq'
		английский = 'en'
		арабский = 'ar'
		армянский = 'hy'
		азербайджанский = 'az'
		африкаанс = 'af'
		баскский = 'eu'
		белорусский = 'be'
		болгарский = 'bg'
		боснийский = 'bs'
		валлийский = 'cy'
		вьетнамский = 'vi'
		венгерский = 'hu'
		'гаитянский (креольский)' = 'ht'
		галисийский = 'gl'
		голландский = 'nl'
		греческий = 'el'
		грузинский = 'ka'
		датский = 'da'
		иврит = 'he'
		индонезийский = 'id'
		ирландский = 'ga'
		итальянский = 'it'
		исландский = 'is'
		испанский = 'es'
		казахский = 'kk'
		каталанский = 'ca'
		киргизский = 'ky'
		китайский = 'zh'
		корейский = 'ko'
		латынь = 'la'
		латышский = 'lv'
		литовский = 'lt'
		малагасийский = 'mg'
		малайский = 'ms'
		мальтийский = 'mt'
		македонский = 'mk'
		монгольский = 'mn'
		немецкий = 'de'
		норвежский = 'no'
		персидский = 'fa'
		польский = 'pl'
		португальский = 'pt'
		румынский = 'ro'
		русский = 'ru'
		сербский = 'sr'
		словацкий = 'sk'
		словенский = 'sl'
		суахили = 'sw'
		таджикский = 'tg'
		тайский = 'th'
		тагальский = 'tl'
		татарский = 'tt'
		турецкий = 'tr'
		узбекский = 'uz'
		украинский = 'uk'
		финский = 'fi'
		французский = 'fr'
		хорватский = 'hr'
		чешский = 'cs'
		шведский = 'sv'
		эстонский = 'et'
		японский = 'ja'
	}
	
	function New-RegistryKeys
	{
		param ([switch]$New)
		if ($New)
		{
			[void](New-Item -Path 'HKCU:\Software\PK-Tools\Yandex Translate' -Force)
			[void](New-Item -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Name Version -Value $ApplicationVersion -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Name Update -Value 0 -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Name UpdateServer -Value $UpdateServer -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Name UpdateDescription -Value '' -PropertyType String -Force)
		}
		[void](New-Item -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration' -Force)
		[void](New-Item -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Common' -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Common' -Name KeepConfiguration -Value False -PropertyType String -Force)
		[void](New-Item -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name API_Key -Value '' -PropertyType String -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name Proxy -Value False -PropertyType String -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name TopMost -Value False -PropertyType String -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name Encoding -Value 'UTF8' -PropertyType String -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name FontSizeText -Value 8 -PropertyType String -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name FontSizeTranslate -Value 8 -PropertyType String -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name TranslateFrom -Value 'английский' -PropertyType String -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name TranslateTo -Value 'русский' -PropertyType String -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name TranslateDirection -Value 1 -PropertyType String -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name Width -Value 350 -PropertyType String -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name Height -Value 350 -PropertyType String -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name SplitterPosition -Value 160 -PropertyType String -Force)
	}
	
	function Set-TopMost
	{
		if ($checkboxПоверхВсехОкон.Checked)
		{ $MainForm.TopMost = $true }
		else
		{ $MainForm.TopMost = $false }
	}
	
	function Check-Updates
	{
		[version]$current = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Name Version | Select -ExpandProperty Version
		if ([version]$ApplicationVersion -gt [version]$current)
		{ [void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Name Version -Value $ApplicationVersion -PropertyType String -Force) }
		
		Add-JobTracker -Name "Update" `
					   -JobScript {
			try
			{
				$nc = New-Object -TypeName System.Net.WebClient
				$nc.UseDefaultCredentials = $true
				$nc.Proxy.Credentials = $nc.Credentials
				[version]$check = $nc.DownloadString("http://$(Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Name UpdateServer | Select -ExpandProperty UpdateServer)/software/yandex_translate/version.txt")
				[version]$current = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Name Version | Select -ExpandProperty Version
				if ($check -gt $current)
				{ $nc.DownloadString("http://$(Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Name UpdateServer | Select -ExpandProperty UpdateServer)/software/yandex_translate/description.txt") }
				else
				{ [void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Name Update -Value 0 -PropertyType String -Force) }
			}
			catch
			{ }
		}`
					   -CompletedScript {
			Param ($Job)
			$result = Receive-Job -Job $Job
			if ($result)
			{
				Call-update_notification_psf -Title 'Обновление' -DescriptionLabel 'Описание' -DescriptionText $result -UpdateLabel 'Доступна новая версия!'
				[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Name Update -Value 1 -PropertyType String -Force)
			}
		}
		
	}
	
	function Set-Registry
	{
		if ($checkboxСохранитьНастройки.Checked)
		{
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Common' -Name KeepConfiguration -Value $($checkboxСохранитьНастройки.Checked) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name API_Key -Value $($textbox1.Text.Trim()) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name Proxy -Value $($checkboxИспользоватьПрокси.Checked) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name TopMost -Value $($checkboxПоверхВсехОкон.Checked) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name Encoding -Value $($combobox3.SelectedItem) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name FontSizeText -Value $($trackbar1.Value) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name FontSizeTranslate -Value $($trackbar2.Value) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name TranslateFrom -Value $($combobox1.SelectedItem) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name TranslateTo -Value $($combobox2.SelectedItem) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name TranslateDirection -Value $($label1.ImageIndex) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name Width -Value $($MainForm.Size.Width) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name Height -Value $($MainForm.Size.Height) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name SplitterPosition -Value $($splitter1.SplitPosition) -PropertyType String -Force)
		}
		else
		{
			New-RegistryKeys
		}
	}
	
	function Load-Registry
	{
		if ((Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Common' -Name KeepConfiguration | Select -ExpandProperty KeepConfiguration) -eq $true)
		{
			$textbox1.Text = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name API_Key | Select -ExpandProperty API_Key
			$combobox3.SelectedItem = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name Encoding | Select -ExpandProperty Encoding
			$trackbar1.Value = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name FontSizeText | Select -ExpandProperty FontSizeText
			$trackbar2.Value = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name FontSizeTranslate | Select -ExpandProperty FontSizeTranslate
			
			$Width = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name Width | Select -ExpandProperty Width
			$Height = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name Height | Select -ExpandProperty Height
			$MainForm.Size = New-Object System.Drawing.Size($Width, $Height)
			$MainForm.Location = New-Object System.Drawing.Point((([System.Windows.Forms.Screen]::PrimaryScreen.WorkingArea.Width - $MainForm.Width) / 2),(([System.Windows.Forms.Screen]::PrimaryScreen.WorkingArea.Height - $MainForm.Height) / 2))
			
			$splitter1.SplitPosition = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name SplitterPosition | Select -ExpandProperty SplitterPosition
			
			if ((Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Common' -Name KeepConfiguration | Select -ExpandProperty KeepConfiguration) -eq $true)
			{ $checkboxСохранитьНастройки.Checked = $true }
			else
			{ $checkboxСохранитьНастройки.Checked = $false }
			if ((Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name Proxy | Select -ExpandProperty Proxy) -eq $true)
			{ $checkboxИспользоватьПрокси.Checked = $true }
			else
			{ $checkboxИспользоватьПрокси.Checked = $false }
			if ((Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name TopMost | Select -ExpandProperty TopMost) -eq $true)
			{ $checkboxПоверхВсехОкон.Checked = $true }
			else
			{ $checkboxПоверхВсехОкон.Checked = $false }
			$combobox1.SelectedItem = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name TranslateFrom | Select -ExpandProperty TranslateFrom
			$combobox2.SelectedItem = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name TranslateTo | Select -ExpandProperty TranslateTo
			$label1.ImageIndex = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name TranslateDirection | Select -ExpandProperty TranslateDirection
		}
	}
	
	function Set-TranslateLanguage
	{
		$combobox1.Items.Clear()
		$script:Languages.Keys | Sort-Object | % { Load-ComboBox -ComboBox $combobox1 -Items $_ -Append }
		$combobox1.SelectedItem = 'английский'
		$combobox2.SelectedItem = 'русский'
	}
	
	function Set-AvailableTranslateLanguage
	{
		$PreviousSelection = $combobox2.SelectedItem
		$combobox2.Items.Clear()
		$script:Languages.Keys | Sort-Object | % { Load-ComboBox -ComboBox $combobox2 -Items $_ -Append }
		$combobox2.Items.Remove($combobox1.SelectedItem)
		if ($PreviousSelection -eq $combobox1.SelectedItem -and $PreviousSelection -ne 'русский')
		{ $combobox2.SelectedItem = 'русский' }
		elseif ($PreviousSelection -eq 'русский')
		{ $combobox2.SelectedIndex = 0 }
		else
		{ $combobox2.SelectedItem = $PreviousSelection }
	}
	
	function Load-ComboBox
	{
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	function Add-JobTracker
	{
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[string]$Name,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[ScriptBlock]$JobScript,
			$ArgumentList = $null,
			[ScriptBlock]$CompletedScript,
			[ScriptBlock]$UpdateScript)
		
		#Start the Job
		$job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
		
		if ($job -ne $null)
		{
			#Create a Custom Object to keep track of the Job & Script Blocks
			$members = @{
				"Job" = $Job;
				"CompleteScript" = $CompletedScript;
				"UpdateScript" = $UpdateScript
			}
			
			$psObject = New-Object System.Management.Automation.PSObject -Property $members
			
			[void]$JobTrackerList.Add($psObject)
			
			#Start the Timer
			if (-not $timerJobTracker.Enabled)
			{
				$timerJobTracker.Start()
			}
		}
		elseif ($CompletedScript -ne $null)
		{
			#Failed
			Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
		}
		
	}
	
	function Update-JobTracker
	{
		$timerJobTracker.Stop() #Freeze the Timer
		
		for ($index = 0; $index -lt $JobTrackerList.Count; $index++)
		{
			$psObject = $JobTrackerList[$index]
			
			if ($psObject -ne $null)
			{
				if ($psObject.Job -ne $null)
				{
					if ($psObject.Job.State -ne "Running")
					{
						#Call the Complete Script Block
						if ($psObject.CompleteScript -ne $null)
						{
							#$results = Receive-Job -Job $psObject.Job
							Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
						}
						
						$JobTrackerList.RemoveAt($index)
						Remove-Job -Job $psObject.Job
						$index-- #Step back so we don't skip a job
					}
					elseif ($psObject.UpdateScript -ne $null)
					{
						#Call the Update Script Block
						Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
					}
				}
			}
			else
			{
				$JobTrackerList.RemoveAt($index)
				$index-- #Step back so we don't skip a job
			}
		}
		
		if ($JobTrackerList.Count -gt 0)
		{
			$timerJobTracker.Start()#Resume the timer
		}
	}
	
	function Stop-JobTracker
	{
		$timerJobTracker.Stop()
		while ($JobTrackerList.Count -gt 0)
		{
			$job = $JobTrackerList[0].Job
			$JobTrackerList.RemoveAt(0)
			Stop-Job $job
			Remove-Job $job
		}
	}
	
	function Get-Encoding
	{
		'UTF8', 'Unicode', 'ASCII', 'Default' | % { Load-ComboBox -ComboBox $combobox3 -Items $_ -Append }
		if (-not $($checkboxСохранитьНастройки.Checked))
		{ $combobox3.SelectedIndex = 0 }
	}
	
	function Invoke-MessageBox
	{
		param($Text,$Caption)
		[void][System.Windows.Forms.MessageBox]::Show($Text,$Caption)
	}#endregion Source: Globals.ps1

#region Source: update_notification.psf
function Call-update_notification_psf
{
Param($Title, $DescriptionLabel, $DescriptionText, $UpdateLabel)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formUpdate = New-Object 'System.Windows.Forms.Form'
	$richtextboxDescription = New-Object 'System.Windows.Forms.RichTextBox'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$labelDescription = New-Object 'System.Windows.Forms.Label'
	$linklabelUpdate = New-Object 'System.Windows.Forms.LinkLabel'
	$labelNewVersionAvailable = New-Object 'System.Windows.Forms.Label'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	$formUpdate_Load = {
		$formUpdate.TopMost = $true
		$formUpdate.Text = $Title
		$labelNewVersionAvailable.Text = $UpdateLabel
		$labelDescription.Text = $DescriptionLabel
		$richtextboxDescription.Text = $DescriptionText
	}
	
	$linklabelUpdate_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
		[System.Diagnostics.Process]::Start($this.Text)
	}
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formUpdate.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:update_notification_richtextboxDescription = $richtextboxDescription.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$linklabelUpdate.remove_LinkClicked($linklabelUpdate_LinkClicked)
			$formUpdate.remove_Load($formUpdate_Load)
			$formUpdate.remove_Load($Form_StateCorrection_Load)
			$formUpdate.remove_Closing($Form_StoreValues_Closing)
			$formUpdate.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formUpdate.SuspendLayout()
	$groupbox1.SuspendLayout()
	#
	# formUpdate
	#
	$formUpdate.Controls.Add($richtextboxDescription)
	$formUpdate.Controls.Add($groupbox1)
	$formUpdate.ClientSize = '404, 236'
	$formUpdate.FormBorderStyle = 'SizableToolWindow'
	$formUpdate.MaximizeBox = $False
	$formUpdate.MinimizeBox = $False
	$formUpdate.MinimumSize = '420, 270'
	$formUpdate.Name = "formUpdate"
	$formUpdate.ShowIcon = $False
	$formUpdate.StartPosition = 'CenterScreen'
	$formUpdate.Text = "Update"
	$formUpdate.add_Load($formUpdate_Load)
	#
	# richtextboxDescription
	#
	$richtextboxDescription.Dock = 'Fill'
	$richtextboxDescription.Location = '0, 100'
	$richtextboxDescription.Name = "richtextboxDescription"
	$richtextboxDescription.ReadOnly = $True
	$richtextboxDescription.Size = '404, 136'
	$richtextboxDescription.TabIndex = 1
	$richtextboxDescription.Text = ""
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($labelDescription)
	$groupbox1.Controls.Add($linklabelUpdate)
	$groupbox1.Controls.Add($labelNewVersionAvailable)
	$groupbox1.Dock = 'Top'
	$groupbox1.Location = '0, 0'
	$groupbox1.Name = "groupbox1"
	$groupbox1.Size = '404, 100'
	$groupbox1.TabIndex = 4
	$groupbox1.TabStop = $False
	#
	# labelDescription
	#
	$labelDescription.Dock = 'Fill'
	$labelDescription.Location = '3, 39'
	$labelDescription.Name = "labelDescription"
	$labelDescription.Size = '398, 35'
	$labelDescription.TabIndex = 3
	$labelDescription.Text = "Description"
	$labelDescription.TextAlign = 'MiddleCenter'
	#
	# linklabelUpdate
	#
	$linklabelUpdate.Dock = 'Bottom'
	$linklabelUpdate.Location = '3, 74'
	$linklabelUpdate.Name = "linklabelUpdate"
	$linklabelUpdate.Size = '398, 23'
	$linklabelUpdate.TabIndex = 0
	$linklabelUpdate.TabStop = $True
	$linklabelUpdate.Text = "http://wgo-it000000601/software/yandex_translate/YandexTranslate.exe"
	$linklabelUpdate.TextAlign = 'MiddleCenter'
	$linklabelUpdate.add_LinkClicked($linklabelUpdate_LinkClicked)
	#
	# labelNewVersionAvailable
	#
	$labelNewVersionAvailable.Dock = 'Top'
	$labelNewVersionAvailable.Location = '3, 16'
	$labelNewVersionAvailable.Name = "labelNewVersionAvailable"
	$labelNewVersionAvailable.Size = '398, 23'
	$labelNewVersionAvailable.TabIndex = 2
	$labelNewVersionAvailable.Text = "New version available!"
	$labelNewVersionAvailable.TextAlign = 'MiddleCenter'
	$groupbox1.ResumeLayout($false)
	$formUpdate.ResumeLayout($false)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formUpdate.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formUpdate.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formUpdate.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formUpdate.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formUpdate.ShowDialog()
}
#endregion Source: update_notification.psf

#Start the application
Main ($CommandLine)
