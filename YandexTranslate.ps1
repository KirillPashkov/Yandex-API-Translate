<#
    .NOTES
    --------------------------------------------------------------------------------
     Generated on:       20.06.2016 12:12
     Generated by:       Kirill Pashkov
    --------------------------------------------------------------------------------
#>


#region Source: Startup.pss
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

function Main {
	Param ([String]$Commandline)
	$script:Dictionary = New-Object System.Collections.Specialized.StringDictionary
	Convert-CommandLineToDictionary -Dictionary $script:Dictionary -CommandLine $Commandline -ParamIndicator '-'
	if((Call-MainForm_psf) -eq "OK")
	{
		
	}
	$global:ExitCode = 0
}#endregion Source: Startup.pss

#region Source: MainForm.psf
function Call-MainForm_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$buttonAbout = New-Object 'System.Windows.Forms.Button'
	$tabcontrol1 = New-Object 'System.Windows.Forms.TabControl'
	$tabpage1 = New-Object 'System.Windows.Forms.TabPage'
	$splitter1 = New-Object 'System.Windows.Forms.Splitter'
	$groupbox6 = New-Object 'System.Windows.Forms.GroupBox'
	$trackbar2 = New-Object 'System.Windows.Forms.TrackBar'
	$richtextbox2 = New-Object 'System.Windows.Forms.RichTextBox'
	$groupbox4 = New-Object 'System.Windows.Forms.GroupBox'
	$richtextbox1 = New-Object 'System.Windows.Forms.RichTextBox'
	$trackbar1 = New-Object 'System.Windows.Forms.TrackBar'
	$groupbox5 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonStartJob = New-Object 'System.Windows.Forms.Button'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$combobox2 = New-Object 'System.Windows.Forms.ComboBox'
	$combobox1 = New-Object 'System.Windows.Forms.ComboBox'
	$tabpage2 = New-Object 'System.Windows.Forms.TabPage'
	$groupbox3 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonReset = New-Object 'System.Windows.Forms.Button'
	$checkboxСохранятьИсториюПоис = New-Object 'System.Windows.Forms.CheckBox'
	$buttonYandexAPI = New-Object 'System.Windows.Forms.Button'
	$labelКодировка = New-Object 'System.Windows.Forms.Label'
	$combobox3 = New-Object 'System.Windows.Forms.ComboBox'
	$checkboxИспользоватьПроксиСе = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxСохранятьНастройки = New-Object 'System.Windows.Forms.CheckBox'
	$checkboxПоверхВсехОкон = New-Object 'System.Windows.Forms.CheckBox'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$tabpage3 = New-Object 'System.Windows.Forms.TabPage'
	$datagridviewHistory = New-Object 'System.Windows.Forms.DataGridView'
	$groupboxSearchHistory = New-Object 'System.Windows.Forms.GroupBox'
	$textboxSearch = New-Object 'System.Windows.Forms.TextBox'
	$buttonИскать = New-Object 'System.Windows.Forms.Button'
	$imagelistButtonBusyAnimation = New-Object 'System.Windows.Forms.ImageList'
	$timerJobTracker = New-Object 'System.Windows.Forms.Timer'
	$tooltip1 = New-Object 'System.Windows.Forms.ToolTip'
	$timer1 = New-Object 'System.Windows.Forms.Timer'
	$imagelist1 = New-Object 'System.Windows.Forms.ImageList'
	$contextmenustripTranslate = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$очиститьToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$contextmenustripHistory = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$удалитьToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolstripseparator1 = New-Object 'System.Windows.Forms.ToolStripSeparator'
	$удалитьВсеToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$OnLoadFormEvent = {
		Set-CommandLineParameters
		if (-not (Test-Path 'HKCU:\Software\PK-Tools\Yandex Translate'))
		{
			New-RegistryKeys -New
		}
		Set-MissingRegistryItems
		Set-TranslateLanguage
		Get-Encoding
		Load-Registry
		Set-TopMost
		& $trackbar1_Scroll
		& $trackbar2_Scroll
		Check-Updates
		$richtextbox1.Select()
	}
	
	$checkboxПоверхВсехОкон_CheckedChanged = {
		Set-TopMost
	}
	
	$formMain_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
		Set-Registry
		Stop-JobTracker
	}
	
	$timerJobTracker_Tick = {
		Update-JobTracker
	}
	
	$JobTrackerList = New-Object System.Collections.ArrayList
	
	$buttonStartJob_Click = {
		if ($richtextbox1.Text.Trim() -ne '')
		{
			$tabcontrol1.Enabled = $false
			$richtextbox2.Clear()
			$proxy = $($checkboxИспользоватьПроксиСе.Checked)
			$encode = $($combobox3.SelectedItem)
			$api_key = $($textbox1.Text.Trim())
			$text = $((((((((((((($richtextbox1.Text.Trim()) -replace ' # ', ' ESCH11 ') -replace ' #', ' ESCH12 ') -replace '# ', ' ESCH13 ') -replace '#', ' ESCH14 ') -replace ' ; ', ' ESCH21 ') -replace ' ;', ' ESCH22 ') -replace '; ', ' ESCH23 ') -replace ';', ' ESCH24 ') -replace ' & ', ' ESCH31 ') -replace ' &', ' ESCH32 ') -replace '& ', ' ESCH33 ') -replace '&', ' ESCH34 ')
			if ($label1.ImageIndex -eq 1)
			{
				$script:from = $Languages.Item($($combobox1.SelectedItem))
				$script:to = $Languages.Item($($combobox2.SelectedItem))
			}
			else
			{
				$script:to = $Languages.Item($($combobox1.SelectedItem))
				$script:from = $Languages.Item($($combobox2.SelectedItem))
			}
			$downloadstring = "https://translate.yandex.net/api/v1.5/tr/translate?key=$api_key&text=$text&lang=$script:from-$script:to&; [format=plain]"
			# $script:Languages $downloadstring = "https://translate.yandex.net/api/v1.5/tr/getLangs?key=$api_key"
			$arguments = $proxy, $encode, $downloadstring
			Add-JobTracker -Name "Translate" `
						   -JobScript {
				Param ($1, $2, $3)
				$WebRequest = New-Object -TypeName System.Net.WebClient
				if ($1 -eq $true)
				{
					$WebRequest.UseDefaultCredentials = $true
					$WebRequest.Proxy.Credentials = $WebRequest.Credentials
					
				}
				$WebRequest.Encoding = [System.Text.Encoding]::$2
				$WebAnswer = $WebRequest.DownloadString($3)
				$WebRequest.Dispose()
				Write-Output $WebAnswer
			}`
						   -CompletedScript {
				Param ($Job)
				$results = Receive-Job -Job $Job
				$converted = $($results -as [xml])
				
				switch ($converted.Translation.code)
				{
					200 { Get-TranslateItem }
					401 { Invoke-MessageBox -Caption Ошибка -Text 'Неправильный ключ API' }
					402 { Invoke-MessageBox -Caption Ошибка -Text 'Ключ API заблокирован' }
					403 { Invoke-MessageBox -Caption Ошибка -Text 'Превышено суточное ограничение на количество запросов' }
					404 { Invoke-MessageBox -Caption Ошибка -Text 'Превышено суточное ограничение на объем переведенного текста' }
					413 { Invoke-MessageBox -Caption Ошибка -Text 'Превышен максимально допустимый размер текста' }
					422 { Invoke-MessageBox -Caption Ошибка -Text 'Текст не может быть переведен' }
					501 { Invoke-MessageBox -Caption Ошибка -Text 'Заданное направление перевода не поддерживается' }
					default { Invoke-MessageBox -Caption Ошибка -Text "Ошибка получения данных.`n`nПроверьте:`n`n- Наличие подключения.`n- Необходимость использования прокси.`n- Корректность ключа API.`n- Используемую кодировку." }
				}
				
				$buttonStartJob.ImageIndex = -1
				$tabcontrol1.Enabled = $true
			}`
						   -UpdateScript {
				Param ($Job)
				if ($buttonStartJob.ImageList -ne $null)
				{
					if ($buttonStartJob.ImageIndex -lt $buttonStartJob.ImageList.Images.Count - 1)
					{
						$buttonStartJob.ImageIndex += 1
					}
					else
					{
						$buttonStartJob.ImageIndex = 0
					}
				}
			} -ArgumentList $arguments
		}
		else
		{
			$richtextbox1.BackColor = 'LightCoral'
			$richtextbox1.Select()
			$timer1.Start()
		}
	}
	$trackbar1_Scroll = {
		$richtextbox1.Font = New-Object -TypeName System.Drawing.Font('Microsoft Sans Serif', $($trackbar1.Value))
		$richtextbox1.Select()
	}
	
	$trackbar2_Scroll = {
		$richtextbox2.Font = New-Object -TypeName System.Drawing.Font('Microsoft Sans Serif', $($trackbar2.Value))
		$richtextbox2.Select()
	}
	$timer1_Tick = {
		$richtextbox1.BackColor = 'Window'
		$textboxSearch.BackColor = 'Window'
		$timer1.Stop()
	}
	
	$label1_Click = {
		if ($label1.ImageIndex -eq 1)
		{ $label1.ImageIndex = 0 }
		else { $label1.ImageIndex = 1 }
	}
	
	$очиститьToolStripMenuItem_Click = {
		$richtextbox1.Clear()
		$richtextbox2.Clear()
	}
	
	$trackbar1_MouseHover = {
		$tooltip1.SetToolTip($this, ('Размер шрифта: ' + $this.Value))
	}
	
	$tabcontrol1_SelectedIndexChanged = {
		if ($this.SelectedIndex -eq 2 -and (@(Get-Item 'HKCU:\Software\PK-Tools\Yandex Translate\History' | Select -expand Property).Count -gt 0))
		{
			$tabcontrol1.Enabled = $false
			$MainForm.Text = 'Яндекс переводчик - Загрузка истории поиска'
			Add-JobTracker -Name "GetHistory" `
						   -JobScript {
				function Convert-BinaryToText
				{
					[cmdletbinding()]
					Param (
						[parameter(ValueFromPipeLine = 'True')]
						[string]$Binary
					)
					Begin
					{
						[string[]]$TextArray = @()
					}
					Process
					{
						$BinaryArray = $Binary -split '\s'
						
						ForEach ($a in $BinaryArray)
						{
							$TextArray += [char]([convert]::ToInt64($a, 2))
						}
					}
					End
					{
						[string]::Join('', $TextArray)
					}
				}
				
				function Get-TranslateHistory
				{
					$Columns = @('Дата', 'Время', 'Перевод из', 'Перевод в', 'Текст', 'Перевод')
					$TranslateHistoryList = Get-Item 'HKCU:\Software\PK-Tools\Yandex Translate\History' | Select -expand Property
					$TranslateHistoryList | % {
						$Item = $_
						$Binary = @((Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\History' -Name $Item).$Item -split ',')
						$String = @($Binary | % { Convert-BinaryToText $_ })
						
						$i = 0
						$Obj = New-Object PSObject
						$String | % {
							$String_Item = $_
							$Obj | Add-Member -MemberType NoteProperty $Columns[$i] -Value $String_Item
							$i++
						}
						$Obj
					}
				}
				Get-TranslateHistory
			}`
						   -CompletedScript {
				Param ($Job)
				$datasource = ConvertTo-DataTable -Source $(Receive-Job -Job $Job | Sort-Object Дата, Время -Descending)
				if ($datasource)
				{
					$datagridviewHistory.DataSource = $datasource
					$buttonИскать.Enabled = $true
					$textboxSearch.Enabled = $true
					Set-ColumnsWidth
				}
				else
				{
					$buttonИскать.Enabled = $false
					$textboxSearch.Enabled = $false
				}
				$MainForm.Text = 'Яндекс переводчик'
				$tabcontrol1.Enabled = $true
			}`
						   -UpdateScript {
				Param ($Job)
				if ($labelLoadingHistory.Text.Length -lt 50)
				{ $MainForm.Text += '.' }
				else
				{ $MainForm.Text = 'Яндекс переводчик - Загрузка истории поиска' }
			}
		}
		else
		{
			$datagridviewHistory.DataSource = $null
			$buttonИскать.Enabled = $false
			$textboxSearch.Enabled = $false
		}
		$textboxSearch.Select()
	}
	
	$buttonИскать_Click = {
		if ($textboxSearch.Text -ne '')
		{
			$this.Enabled = $false
			SearchGrid
			$this.Enabled = $true
		}
		else
		{
			$textboxSearch.BackColor = 'LightCoral'
			$textboxSearch.Select()
			$timer1.Start()
		}
	}
	
	$datagridviewHistory_ColumnHeaderMouseClick = [System.Windows.Forms.DataGridViewCellMouseEventHandler]{
		if ($datagridviewHistory.DataSource -is [System.Data.DataTable])
		{
			$column = $datagridviewHistory.Columns[$_.ColumnIndex]
			$direction = [System.ComponentModel.ListSortDirection]::Ascending
			
			if ($column.HeaderCell.SortGlyphDirection -eq 'Descending')
			{
				$direction = [System.ComponentModel.ListSortDirection]::Descending
			}
			
			$datagridviewHistory.Sort($datagridviewHistory.Columns[$_.ColumnIndex], $direction)
		}
	}
	
	$textboxSearch_KeyDown = [System.Windows.Forms.KeyEventHandler]{
		if ($_.KeyCode -eq 'Enter' -and $buttonИскать.Enabled)
		{
			SearchGrid
			$_.SuppressKeyPress = $true
		}
	}
	
	$richtextbox1_KeyDown = [System.Windows.Forms.KeyEventHandler]{
		if ($_.Control -eq $true -and $_.KeyCode -eq [System.Windows.Forms.Keys]::Enter)
		{
			$_.SuppressKeyPress = $true
			& $buttonStartJob_Click
		}
	}
	
	$datagridviewHistory_DataError = [System.Windows.Forms.DataGridViewDataErrorEventHandler]{
		{ $Error.Exception.Message }
	}
	
	$удалитьToolStripMenuItem_Click = {
		$HistoryElements = @($datagridviewHistory.SelectedCells | Select-Object -ExpandProperty RowIndex)
		$HistoryElements | % {
			$HistoryElementsItem = $_
			$Date = $datagridviewHistory.Rows[$HistoryElementsItem].Cells[0].Value
			$Time = $datagridviewHistory.Rows[$HistoryElementsItem].Cells[1].Value
			$Name = $Date.ToString() + ' ' + $Time.ToString()
			Remove-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\History\' -Name $Name -Force
			$datagridviewHistory.Rows.RemoveAt($HistoryElementsItem)
			if (@(Get-Item 'HKCU:\Software\PK-Tools\Yandex Translate\History' | Select -expand Property).Count -eq 0)
			{
				$datagridviewHistory.DataSource = $null
				$buttonИскать.Enabled = $false
				$textboxSearch.Enabled = $false
			}
		}
	}
	
	$удалитьВсеToolStripMenuItem_Click = {
		Remove-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\History\' -Name * -Force
		$datagridviewHistory.DataSource = $null
		$buttonИскать.Enabled = $false
		$textboxSearch.Enabled = $false
	}
	
	$buttonYandexAPI_Click = {
		[System.Diagnostics.Process]::Start('https://tech.yandex.ru/keys/get/?service=trnsl')
	}
	
	$buttonAbout_Click = {
		Call-about_psf -Version $ApplicationVersion -UpdateServer $UpdateServer -UpdatePage $UpdatePage
	}
	
	$buttonReset_Click = {
		if ([System.Windows.Forms.MessageBox]::Show("Вернуть все настройки к параметрам по умолчанию?`n`nТакже будет выполнена очистка истории поиска.", 'Предупреждение', [System.Windows.Forms.MessageBoxButtons]::YesNo) -eq "Yes")
		{
			Remove-Item 'HKCU:\Software\PK-Tools\Yandex Translate\' -Recurse -Force
			$MainForm.Dispose()
			$arguments = '/c "timeout 1 > nul & start "" /min "' + $script:Executable + '""'
			[System.Diagnostics.Process]::Start('cmd', $arguments)
		}
	}	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_trackbar2 = $trackbar2.Value
		$script:MainForm_richtextbox2 = $richtextbox2.Text
		$script:MainForm_richtextbox1 = $richtextbox1.Text
		$script:MainForm_trackbar1 = $trackbar1.Value
		$script:MainForm_combobox2_SelectedItem = $combobox2.SelectedItems
		$script:MainForm_combobox1_SelectedItem = $combobox1.SelectedItems
		$script:MainForm_checkboxСохранятьИсториюПоис = $checkboxСохранятьИсториюПоис.Checked
		$script:MainForm_combobox3_SelectedItem = $combobox3.SelectedItems
		$script:MainForm_checkboxИспользоватьПроксиСе = $checkboxИспользоватьПроксиСе.Checked
		$script:MainForm_checkboxСохранятьНастройки = $checkboxСохранятьНастройки.Checked
		$script:MainForm_checkboxПоверхВсехОкон = $checkboxПоверхВсехОкон.Checked
		$script:MainForm_textbox1 = $textbox1.Text
		$script:MainForm_textboxSearch = $textboxSearch.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonAbout.remove_Click($buttonAbout_Click)
			$trackbar2.remove_Scroll($trackbar2_Scroll)
			$trackbar2.remove_MouseHover($trackbar1_MouseHover)
			$richtextbox1.remove_KeyDown($richtextbox1_KeyDown)
			$trackbar1.remove_Scroll($trackbar1_Scroll)
			$trackbar1.remove_MouseHover($trackbar1_MouseHover)
			$buttonStartJob.remove_Click($buttonStartJob_Click)
			$label1.remove_Click($label1_Click)
			$buttonReset.remove_Click($buttonReset_Click)
			$buttonYandexAPI.remove_Click($buttonYandexAPI_Click)
			$checkboxПоверхВсехОкон.remove_CheckedChanged($checkboxПоверхВсехОкон_CheckedChanged)
			$datagridviewHistory.remove_ColumnHeaderMouseClick($datagridviewHistory_ColumnHeaderMouseClick)
			$datagridviewHistory.remove_DataError($datagridviewHistory_DataError)
			$textboxSearch.remove_KeyDown($textboxSearch_KeyDown)
			$buttonИскать.remove_Click($buttonИскать_Click)
			$tabcontrol1.remove_SelectedIndexChanged($tabcontrol1_SelectedIndexChanged)
			$MainForm.remove_FormClosed($formMain_FormClosed)
			$MainForm.remove_Load($OnLoadFormEvent)
			$timerJobTracker.remove_Tick($timerJobTracker_Tick)
			$timer1.remove_Tick($timer1_Tick)
			$очиститьToolStripMenuItem.remove_Click($очиститьToolStripMenuItem_Click)
			$удалитьToolStripMenuItem.remove_Click($удалитьToolStripMenuItem_Click)
			$удалитьВсеToolStripMenuItem.remove_Click($удалитьВсеToolStripMenuItem_Click)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$tabcontrol1.SuspendLayout()
	$tabpage1.SuspendLayout()
	$groupbox6.SuspendLayout()
	$trackbar2.BeginInit()
	$groupbox4.SuspendLayout()
	$trackbar1.BeginInit()
	$groupbox5.SuspendLayout()
	$groupbox1.SuspendLayout()
	$tabpage2.SuspendLayout()
	$groupbox3.SuspendLayout()
	$groupbox2.SuspendLayout()
	$tabpage3.SuspendLayout()
	$groupboxSearchHistory.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($buttonAbout)
	$MainForm.Controls.Add($tabcontrol1)
	$MainForm.ClientSize = '434, 412'
	$MainForm.MinimumSize = '350, 350'
	$MainForm.Name = "MainForm"
	$MainForm.ShowIcon = $False
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = "Яндекс переводчик"
	$MainForm.add_FormClosed($formMain_FormClosed)
	$MainForm.add_Load($OnLoadFormEvent)
	#
	# buttonAbout
	#
	$buttonAbout.Anchor = 'Top, Right'
	$buttonAbout.Cursor = "Help"
	$buttonAbout.Font = "Microsoft Sans Serif, 5.25pt"
	$buttonAbout.Location = '416, 2'
	$buttonAbout.Name = "buttonAbout"
	$buttonAbout.Size = '16, 16'
	$buttonAbout.TabIndex = 3
	$buttonAbout.Text = "?"
	$buttonAbout.TextAlign = 'TopCenter'
	$buttonAbout.UseVisualStyleBackColor = $True
	$buttonAbout.add_Click($buttonAbout_Click)
	#
	# tabcontrol1
	#
	$tabcontrol1.Controls.Add($tabpage1)
	$tabcontrol1.Controls.Add($tabpage2)
	$tabcontrol1.Controls.Add($tabpage3)
	$tabcontrol1.Dock = 'Fill'
	$tabcontrol1.Location = '0, 0'
	$tabcontrol1.Name = "tabcontrol1"
	$tabcontrol1.SelectedIndex = 0
	$tabcontrol1.Size = '434, 412'
	$tabcontrol1.TabIndex = 0
	$tabcontrol1.add_SelectedIndexChanged($tabcontrol1_SelectedIndexChanged)
	#
	# tabpage1
	#
	$tabpage1.Controls.Add($splitter1)
	$tabpage1.Controls.Add($groupbox6)
	$tabpage1.Controls.Add($groupbox4)
	$tabpage1.Controls.Add($groupbox5)
	$tabpage1.Controls.Add($groupbox1)
	$tabpage1.BackColor = 'Control'
	$tabpage1.Font = "Microsoft Sans Serif, 8.25pt"
	$tabpage1.Location = '4, 22'
	$tabpage1.Name = "tabpage1"
	$tabpage1.Padding = '3, 3, 3, 3'
	$tabpage1.Size = '426, 386'
	$tabpage1.TabIndex = 0
	$tabpage1.Text = "Переводчик"
	#
	# splitter1
	#
	$splitter1.Cursor = "SizeNS"
	$splitter1.Dock = 'Top'
	$splitter1.Location = '3, 183'
	$splitter1.MinExtra = 75
	$splitter1.MinSize = 75
	$splitter1.Name = "splitter1"
	$splitter1.RightToLeft = 'Yes'
	$splitter1.Size = '420, 2'
	$splitter1.TabIndex = 4
	$splitter1.TabStop = $False
	#
	# groupbox6
	#
	$groupbox6.Controls.Add($trackbar2)
	$groupbox6.Controls.Add($richtextbox2)
	$groupbox6.Dock = 'Fill'
	$groupbox6.Location = '3, 183'
	$groupbox6.Name = "groupbox6"
	$groupbox6.Size = '420, 164'
	$groupbox6.TabIndex = 3
	$groupbox6.TabStop = $False
	$groupbox6.Text = "Перевод"
	#
	# trackbar2
	#
	$trackbar2.AutoSize = $False
	$trackbar2.Dock = 'Right'
	$trackbar2.Location = '402, 16'
	$trackbar2.Maximum = 72
	$trackbar2.Minimum = 8
	$trackbar2.Name = "trackbar2"
	$trackbar2.Orientation = 'Vertical'
	$trackbar2.Size = '15, 145'
	$trackbar2.TabIndex = 0
	$trackbar2.TickStyle = 'None'
	$trackbar2.Value = 8
	$trackbar2.add_Scroll($trackbar2_Scroll)
	$trackbar2.add_MouseHover($trackbar1_MouseHover)
	#
	# richtextbox2
	#
	$richtextbox2.BorderStyle = 'None'
	$richtextbox2.ContextMenuStrip = $contextmenustripTranslate
	$richtextbox2.Dock = 'Fill'
	$richtextbox2.Location = '3, 16'
	$richtextbox2.Name = "richtextbox2"
	$richtextbox2.ReadOnly = $True
	$richtextbox2.Size = '414, 145'
	$richtextbox2.TabIndex = 1
	$richtextbox2.Text = ""
	#
	# groupbox4
	#
	$groupbox4.Controls.Add($richtextbox1)
	$groupbox4.Controls.Add($trackbar1)
	$groupbox4.Dock = 'Top'
	$groupbox4.Location = '3, 43'
	$groupbox4.Name = "groupbox4"
	$groupbox4.Size = '420, 140'
	$groupbox4.TabIndex = 1
	$groupbox4.TabStop = $False
	$groupbox4.Text = "Переводимый текст"
	#
	# richtextbox1
	#
	$richtextbox1.BorderStyle = 'None'
	$richtextbox1.ContextMenuStrip = $contextmenustripTranslate
	$richtextbox1.Dock = 'Fill'
	$richtextbox1.Location = '3, 16'
	$richtextbox1.Name = "richtextbox1"
	$richtextbox1.Size = '399, 121'
	$richtextbox1.TabIndex = 0
	$richtextbox1.Text = ""
	$richtextbox1.add_KeyDown($richtextbox1_KeyDown)
	#
	# trackbar1
	#
	$trackbar1.AutoSize = $False
	$trackbar1.Dock = 'Right'
	$trackbar1.Location = '402, 16'
	$trackbar1.Maximum = 72
	$trackbar1.Minimum = 8
	$trackbar1.Name = "trackbar1"
	$trackbar1.Orientation = 'Vertical'
	$trackbar1.Size = '15, 121'
	$trackbar1.TabIndex = 1
	$trackbar1.TickStyle = 'None'
	$trackbar1.Value = 8
	$trackbar1.add_Scroll($trackbar1_Scroll)
	$trackbar1.add_MouseHover($trackbar1_MouseHover)
	#
	# groupbox5
	#
	$groupbox5.Controls.Add($buttonStartJob)
	$groupbox5.Dock = 'Bottom'
	$groupbox5.Location = '3, 347'
	$groupbox5.Name = "groupbox5"
	$groupbox5.Size = '420, 36'
	$groupbox5.TabIndex = 2
	$groupbox5.TabStop = $False
	#
	# buttonStartJob
	#
	$buttonStartJob.Dock = 'Bottom'
	$buttonStartJob.ImageList = $imagelistButtonBusyAnimation
	$buttonStartJob.Location = '3, 9'
	$buttonStartJob.Name = "buttonStartJob"
	$buttonStartJob.Size = '414, 24'
	$buttonStartJob.TabIndex = 0
	$buttonStartJob.Text = "&Перевести"
	$buttonStartJob.TextImageRelation = 'ImageBeforeText'
	$buttonStartJob.UseVisualStyleBackColor = $True
	$buttonStartJob.add_Click($buttonStartJob_Click)
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($label1)
	$groupbox1.Controls.Add($combobox2)
	$groupbox1.Controls.Add($combobox1)
	$groupbox1.BackColor = 'Control'
	$groupbox1.Dock = 'Top'
	$groupbox1.FlatStyle = 'Flat'
	$groupbox1.Location = '3, 3'
	$groupbox1.Name = "groupbox1"
	$groupbox1.Size = '420, 40'
	$groupbox1.TabIndex = 0
	$groupbox1.TabStop = $False
	$groupbox1.Text = "Направление перевода"
	#
	# label1
	#
	$label1.Anchor = 'Top, Bottom'
	$label1.BackColor = 'Control'
	$label1.ImageIndex = 1
	$label1.ImageList = $imagelist1
	$label1.Location = '189, 9'
	$label1.Name = "label1"
	$label1.Size = '42, 26'
	$label1.TabIndex = 2
	$tooltip1.SetToolTip($label1, "Направление перевода")
	$label1.add_Click($label1_Click)
	#
	# combobox2
	#
	$combobox2.Anchor = 'Top, Bottom, Right'
	$combobox2.DropDownStyle = 'DropDownList'
	$combobox2.FormattingEnabled = $True
	$combobox2.Location = '284, 13'
	$combobox2.Name = "combobox2"
	$combobox2.Size = '130, 21'
	$combobox2.TabIndex = 1
	#
	# combobox1
	#
	$combobox1.Anchor = 'Top, Bottom, Left'
	$combobox1.DropDownStyle = 'DropDownList'
	$combobox1.FormattingEnabled = $True
	$combobox1.Location = '6, 13'
	$combobox1.Name = "combobox1"
	$combobox1.Size = '130, 21'
	$combobox1.TabIndex = 0
	#
	# tabpage2
	#
	$tabpage2.Controls.Add($groupbox3)
	$tabpage2.Controls.Add($groupbox2)
	$tabpage2.BackColor = 'Control'
	$tabpage2.Location = '4, 22'
	$tabpage2.Name = "tabpage2"
	$tabpage2.Padding = '3, 3, 3, 3'
	$tabpage2.Size = '426, 386'
	$tabpage2.TabIndex = 1
	$tabpage2.Text = "Конфигурация"
	#
	# groupbox3
	#
	$groupbox3.Controls.Add($buttonReset)
	$groupbox3.Controls.Add($checkboxСохранятьИсториюПоис)
	$groupbox3.Controls.Add($buttonYandexAPI)
	$groupbox3.Controls.Add($labelКодировка)
	$groupbox3.Controls.Add($combobox3)
	$groupbox3.Controls.Add($checkboxИспользоватьПроксиСе)
	$groupbox3.Controls.Add($checkboxСохранятьНастройки)
	$groupbox3.Controls.Add($checkboxПоверхВсехОкон)
	$groupbox3.BackColor = 'Control'
	$groupbox3.Dock = 'Fill'
	$groupbox3.Location = '3, 53'
	$groupbox3.Name = "groupbox3"
	$groupbox3.Size = '420, 330'
	$groupbox3.TabIndex = 1
	$groupbox3.TabStop = $False
	#
	# buttonReset
	#
	$buttonReset.Location = '3, 183'
	$buttonReset.Name = "buttonReset"
	$buttonReset.Size = '164, 23'
	$buttonReset.TabIndex = 7
	$buttonReset.Text = "Настройки по умолчанию"
	$buttonReset.UseVisualStyleBackColor = $True
	$buttonReset.add_Click($buttonReset_Click)
	#
	# checkboxСохранятьИсториюПоис
	#
	$checkboxСохранятьИсториюПоис.Location = '3, 124'
	$checkboxСохранятьИсториюПоис.Name = "checkboxСохранятьИсториюПоис"
	$checkboxСохранятьИсториюПоис.Size = '180, 24'
	$checkboxСохранятьИсториюПоис.TabIndex = 6
	$checkboxСохранятьИсториюПоис.Text = "Сохранять историю поиска"
	$checkboxСохранятьИсториюПоис.UseVisualStyleBackColor = $True
	#
	# buttonYandexAPI
	#
	$buttonYandexAPI.Location = '3, 154'
	$buttonYandexAPI.Name = "buttonYandexAPI"
	$buttonYandexAPI.Size = '164, 23'
	$buttonYandexAPI.TabIndex = 5
	$buttonYandexAPI.Text = "Получить ключ API"
	$buttonYandexAPI.UseVisualStyleBackColor = $True
	$buttonYandexAPI.add_Click($buttonYandexAPI_Click)
	#
	# labelКодировка
	#
	$labelКодировка.Location = '6, 16'
	$labelКодировка.Name = "labelКодировка"
	$labelКодировка.Size = '65, 23'
	$labelКодировка.TabIndex = 4
	$labelКодировка.Text = "Кодировка"
	$labelКодировка.TextAlign = 'MiddleLeft'
	#
	# combobox3
	#
	$combobox3.DropDownStyle = 'DropDownList'
	$combobox3.FormattingEnabled = $True
	$combobox3.Location = '77, 16'
	$combobox3.Name = "combobox3"
	$combobox3.Size = '90, 21'
	$combobox3.TabIndex = 3
	#
	# checkboxИспользоватьПроксиСе
	#
	$checkboxИспользоватьПроксиСе.Location = '3, 43'
	$checkboxИспользоватьПроксиСе.Name = "checkboxИспользоватьПроксиСе"
	$checkboxИспользоватьПроксиСе.Size = '180, 24'
	$checkboxИспользоватьПроксиСе.TabIndex = 2
	$checkboxИспользоватьПроксиСе.Text = "Использовать прокси сервер"
	$checkboxИспользоватьПроксиСе.UseVisualStyleBackColor = $True
	#
	# checkboxСохранятьНастройки
	#
	$checkboxСохранятьНастройки.Location = '3, 97'
	$checkboxСохранятьНастройки.Name = "checkboxСохранятьНастройки"
	$checkboxСохранятьНастройки.Size = '180, 24'
	$checkboxСохранятьНастройки.TabIndex = 1
	$checkboxСохранятьНастройки.Text = "Сохранять настройки"
	$checkboxСохранятьНастройки.UseVisualStyleBackColor = $True
	#
	# checkboxПоверхВсехОкон
	#
	$checkboxПоверхВсехОкон.Location = '3, 70'
	$checkboxПоверхВсехОкон.Name = "checkboxПоверхВсехОкон"
	$checkboxПоверхВсехОкон.Size = '180, 24'
	$checkboxПоверхВсехОкон.TabIndex = 0
	$checkboxПоверхВсехОкон.Text = "Поверх всех окон"
	$checkboxПоверхВсехОкон.UseVisualStyleBackColor = $True
	$checkboxПоверхВсехОкон.add_CheckedChanged($checkboxПоверхВсехОкон_CheckedChanged)
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($textbox1)
	$groupbox2.BackColor = 'Control'
	$groupbox2.Dock = 'Top'
	$groupbox2.Location = '3, 3'
	$groupbox2.Name = "groupbox2"
	$groupbox2.Size = '420, 50'
	$groupbox2.TabIndex = 0
	$groupbox2.TabStop = $False
	$groupbox2.Text = "Ключ API"
	#
	# textbox1
	#
	$textbox1.Dock = 'Fill'
	$textbox1.Location = '3, 16'
	$textbox1.Name = "textbox1"
	$textbox1.Size = '414, 20'
	$textbox1.TabIndex = 0
	#
	# tabpage3
	#
	$tabpage3.Controls.Add($datagridviewHistory)
	$tabpage3.Controls.Add($groupboxSearchHistory)
	$tabpage3.Location = '4, 22'
	$tabpage3.Name = "tabpage3"
	$tabpage3.Padding = '3, 3, 3, 3'
	$tabpage3.Size = '426, 386'
	$tabpage3.TabIndex = 2
	$tabpage3.Text = "История поиска"
	$tabpage3.UseVisualStyleBackColor = $True
	#
	# datagridviewHistory
	#
	$datagridviewHistory.AllowUserToAddRows = $False
	$datagridviewHistory.AllowUserToDeleteRows = $False
	$datagridviewHistory.AllowUserToResizeColumns = $False
	$datagridviewHistory.AllowUserToResizeRows = $False
	$System_Windows_Forms_DataGridViewCellStyle_1 = New-Object 'System.Windows.Forms.DataGridViewCellStyle'
	$System_Windows_Forms_DataGridViewCellStyle_1.Alignment = 'MiddleCenter'
	$System_Windows_Forms_DataGridViewCellStyle_1.BackColor = '224, 224, 224'
	$datagridviewHistory.AlternatingRowsDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_1
	$System_Windows_Forms_DataGridViewCellStyle_2 = New-Object 'System.Windows.Forms.DataGridViewCellStyle'
	$System_Windows_Forms_DataGridViewCellStyle_2.Alignment = 'MiddleCenter'
	$System_Windows_Forms_DataGridViewCellStyle_2.BackColor = 'Control'
	$System_Windows_Forms_DataGridViewCellStyle_2.Font = "Microsoft Sans Serif, 8.25pt"
	$System_Windows_Forms_DataGridViewCellStyle_2.ForeColor = 'WindowText'
	$System_Windows_Forms_DataGridViewCellStyle_2.SelectionBackColor = 'Highlight'
	$System_Windows_Forms_DataGridViewCellStyle_2.SelectionForeColor = 'HighlightText'
	$System_Windows_Forms_DataGridViewCellStyle_2.WrapMode = 'True'
	$datagridviewHistory.ColumnHeadersDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridviewHistory.ColumnHeadersHeightSizeMode = 'DisableResizing'
	$datagridviewHistory.ContextMenuStrip = $contextmenustripHistory
	$System_Windows_Forms_DataGridViewCellStyle_3 = New-Object 'System.Windows.Forms.DataGridViewCellStyle'
	$System_Windows_Forms_DataGridViewCellStyle_3.Alignment = 'MiddleCenter'
	$System_Windows_Forms_DataGridViewCellStyle_3.BackColor = 'Window'
	$System_Windows_Forms_DataGridViewCellStyle_3.Font = "Microsoft Sans Serif, 8.25pt"
	$System_Windows_Forms_DataGridViewCellStyle_3.ForeColor = 'ControlText'
	$System_Windows_Forms_DataGridViewCellStyle_3.SelectionBackColor = 'Highlight'
	$System_Windows_Forms_DataGridViewCellStyle_3.SelectionForeColor = 'HighlightText'
	$System_Windows_Forms_DataGridViewCellStyle_3.WrapMode = 'False'
	$datagridviewHistory.DefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_3
	$datagridviewHistory.Dock = 'Fill'
	$datagridviewHistory.Location = '3, 45'
	$datagridviewHistory.Name = "datagridviewHistory"
	$datagridviewHistory.ReadOnly = $True
	$datagridviewHistory.RowHeadersDefaultCellStyle = $System_Windows_Forms_DataGridViewCellStyle_2
	$datagridviewHistory.RowHeadersVisible = $False
	$datagridviewHistory.RowHeadersWidthSizeMode = 'DisableResizing'
	$datagridviewHistory.SelectionMode = 'CellSelect'
	$datagridviewHistory.Size = '420, 338'
	$datagridviewHistory.TabIndex = 5
	$datagridviewHistory.add_ColumnHeaderMouseClick($datagridviewHistory_ColumnHeaderMouseClick)
	$datagridviewHistory.add_DataError($datagridviewHistory_DataError)
	#
	# groupboxSearchHistory
	#
	$groupboxSearchHistory.Controls.Add($textboxSearch)
	$groupboxSearchHistory.Controls.Add($buttonИскать)
	$groupboxSearchHistory.BackColor = 'Control'
	$groupboxSearchHistory.Dock = 'Top'
	$groupboxSearchHistory.Location = '3, 3'
	$groupboxSearchHistory.Name = "groupboxSearchHistory"
	$groupboxSearchHistory.Size = '420, 42'
	$groupboxSearchHistory.TabIndex = 4
	$groupboxSearchHistory.TabStop = $False
	#
	# textboxSearch
	#
	$textboxSearch.Anchor = 'Top, Left, Right'
	$textboxSearch.Location = '6, 16'
	$textboxSearch.Name = "textboxSearch"
	$textboxSearch.Size = '327, 20'
	$textboxSearch.TabIndex = 2
	$textboxSearch.add_KeyDown($textboxSearch_KeyDown)
	#
	# buttonИскать
	#
	$buttonИскать.Anchor = 'Top, Right'
	$buttonИскать.Location = '339, 13'
	$buttonИскать.Name = "buttonИскать"
	$buttonИскать.Size = '75, 23'
	$buttonИскать.TabIndex = 3
	$buttonИскать.Text = "&Искать"
	$buttonИскать.UseVisualStyleBackColor = $True
	$buttonИскать.add_Click($buttonИскать_Click)
	#
	# imagelistButtonBusyAnimation
	#
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	#region Binary Data
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAAB2CgAAAk1TRnQBSQFMAgEBCAEAAYABAQGAAQEBEAEAARABAAT/ASEBAAj/AUIBTQE2
BwABNgMAASgDAAFAAwABMAMAAQEBAAEgBgABMP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/
AP8AugADwgH/AxIB/wMSAf8DwgH/MAADwgH/AzIB/wOCAf8DwgH/sAADEgH/AwAB/wMAAf8DEgH/
MAADggH/AxIB/wMSAf8DMgH/gAADwgH/AxIB/wMSAf8DwgH/IAADEgH/AwAB/wMAAf8DEgH/A8IB
/wMyAf8DggH/A8IB/xAAA8IB/wMSAf8DEgH/A8IB/wMyAf8DEgH/AxIB/wMyAf8EAAOSAf8DkgH/
A8IB/3AAAxIB/wMAAf8DAAH/AxIB/yAAA8IB/wMSAf8DEgH/A8IB/wOCAf8DEgH/AxIB/wOCAf8Q
AAMSAf8DAAH/AwAB/wMSAf8DwgH/AzIB/wOCAf8DwgH/A5IB/wOCAf8DggH/A5IB/3AAAxIB/wMA
Af8DAAH/AxIB/zAAAzIB/wMSAf8DEgH/AzIB/xAAAxIB/wMAAf8DAAH/AxIB/xAAA5IB/wOSAf8D
kgH/A8IB/3AAA8IB/wMSAf8DEgH/A8IB/zAAA8IB/wMyAf8DggH/A8IB/xAAA8IB/wMSAf8DEgH/
A8IB/xAAA8IB/wOSAf8DkgH/A8IB/zgAA8IB/wMSAf8DEgH/A8IB/zAAA8IB/wOCAf8DMgH/A8IB
/zAAA8IB/wPCAf8DkgH/A8IB/zQAA8IB/wPCAf80AAMSAf8DAAH/AwAB/wMSAf8wAAMyAf8DEgH/
AxIB/wMyAf8wAAOSAf8DggH/A4IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf8wAAMSAf8DAAH/AwAB
/wMSAf8wAAOCAf8DEgH/AxIB/wOCAf8wAAPCAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB/wPC
Af8wAAPCAf8DEgH/AxIB/wPCAf8wAAPCAf8DggH/AzIB/wPCAf8wAAPCAf8DkgH/A5IB/wPCAf80
AAPCAf8DwgH/EAADwgH/A8IB/xQAA8IB/wOCAf8DMgH/A8IB/zAAA8IB/wOSAf8DkgH/A8IB/zQA
A8IB/wPCAf9UAAPCAf8DwgH/A8IB/wPCAf8QAAMyAf8DEgH/AxIB/wMyAf8wAAOSAf8DggH/A5IB
/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf9QAAPCAf8DwgH/A8IB/wPCAf8DwgH/A8IB/wOSAf8DwgH/
A4IB/wMSAf8DEgH/A4IB/yQAA8IB/wPCAf8EAAPCAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB
/wPCAf9UAAPCAf8DwgH/BAADkgH/A4IB/wOCAf8DkgH/A8IB/wOCAf8DMgH/A8IB/yAAA8IB/wPC
Af8DwgH/A8IB/wPCAf8DkgH/A5IB/wPCAf80AAPCAf8DwgH/ZAADkgH/A5IB/wOSAf8DkgH/MAAD
wgH/A8IB/wPCAf8DwgH/sAADwgH/A5IB/wOSAf8DwgH/NAADwgH/A8IB/7QAA8IB/wPCAf8DkgH/
A8IB/zQAA8IB/wPCAf+0AAOSAf8DggH/A4IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf+gAAPCAf8D
MgH/A4IB/wPCAf8DkgH/A5IB/wOSAf8DwgH/BAADwgH/A8IB/xQAA8IB/wPCAf8DkgH/A8IB/wPC
Af8DwgH/A8IB/wPCAf8kAAPCAf8DwgH/dAADggH/AxIB/wMSAf8DggH/A8IB/wOSAf8DkgH/A8IB
/wPCAf8DwgH/A8IB/wPCAf8QAAOSAf8DggH/A4IB/wOSAf8EAAPCAf8DwgH/JAADwgH/A8IB/wPC
Af8DwgH/cAADMgH/AxIB/wMSAf8DggH/EAADwgH/A8IB/wPCAf8DwgH/EAADkgH/A5IB/wOSAf8D
kgH/MAADwgH/A8IB/wPCAf8DwgH/cAADwgH/AzIB/wMyAf8DwgH/FAADwgH/A8IB/xQAA8IB/wOS
Af8DkgH/A8IB/zQAA8IB/wPCAf9sAAPCAf8DEgH/AxIB/wPCAf8wAAPCAf8DMgH/A4IB/wPCAf8w
AAPCAf8DwgH/A5IB/wPCAf80AAPCAf8DwgH/NAADEgH/AwAB/wMAAf8DEgH/MAADggH/AxIB/wMS
Af8DMgH/MAADkgH/A4IB/wOCAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/MAADEgH/AwAB/wMAAf8D
EgH/MAADMgH/AxIB/wMSAf8DggH/MAADkgH/A5IB/wOSAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/
MAADwgH/AxIB/wMSAf8DwgH/MAADwgH/AzIB/wMyAf8DwgH/MAADwgH/A5IB/wOSAf8DwgH/NAAD
wgH/A8IB/3wAA8IB/wMSAf8DEgH/A8IB/zAAA8IB/wMyAf8DggH/A8IB/zAAA8IB/wPCAf8DkgH/
A8IB/xAAA8IB/wMSAf8DEgH/A8IB/1AAAxIB/wMAAf8DAAH/AxIB/zAAA4IB/wMSAf8DEgH/AzIB
/zAAA5IB/wOCAf8DggH/A5IB/xAAAxIB/wMAAf8DAAH/AxIB/1AAAxIB/wMAAf8DAAH/AxIB/zAA
AzIB/wMSAf8DEgH/A4IB/wOSAf8DEgH/AxIB/wPCAf8gAAOSAf8DkgH/A5IB/wOSAf8DwgH/AzIB
/wOCAf8DwgH/AxIB/wMAAf8DAAH/AxIB/1AAA8IB/wMSAf8DEgH/A8IB/zAAA8IB/wOCAf8DMgH/
A8IB/wMSAf8DAAH/AwAB/wMSAf8gAAPCAf8DkgH/A5IB/wPCAf8DggH/AxIB/wMSAf8DMgH/A8IB
/wMSAf8DEgH/A8IB/6AAAxIB/wMAAf8DAAH/AxIB/zAAAzIB/wMSAf8DEgH/A4IB/7AAA8IB/wMS
Af8DEgH/A8IB/zAAA8IB/wOCAf8DMgH/A8IB/xgAAUIBTQE+BwABPgMAASgDAAFAAwABMAMAAQEB
AAEBBQABgAEBFgAD/4EABP8B/AE/AfwBPwT/AfwBPwH8AT8D/wHDAfwBAwHAASMD/wHDAfwBAwHA
AQMD/wHDAf8DwwP/AcMB/wPDAf8B8AH/AfAB/wHwAf8B+QH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B
8AH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B+QHnAcMB/wHDAf8B5wL/AsMB/wHDAf8BwwL/AcABAwH+
AUMB/wHDAv8B5AEDAfwBAwH/AecC/wH8AT8B/AE/BP8B/AE/Af4BfwT/AfwBPwH+AX8E/wH8AT8B
/AE/BP8BwAEnAcABPwHnA/8BwAEDAcIBfwHDA/8DwwH/AcMD/wHDAecBwwH/AecD/wEPAf8BDwH/
AQ8B/wGfAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wGfA/8B
wwH/AcMB/wLDAv8BwwH/AcMB/wLDAv8BwwH/AcABPwHAAQMC/wHDAf8BwAE/AcABAwT/AfwBPwH8
AT8E/wH8AT8B/AE/Cw=='))
	#endregion
	$imagelistButtonBusyAnimation.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$imagelistButtonBusyAnimation.TransparentColor = 'Transparent'
	#
	# timerJobTracker
	#
	$timerJobTracker.add_Tick($timerJobTracker_Tick)
	#
	# tooltip1
	#
	#
	# timer1
	#
	$timer1.add_Tick($timer1_Tick)
	#
	# imagelist1
	#
	$Formatter_binaryFomatter = New-Object System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	#region Binary Data
	$System_IO_MemoryStream = New-Object System.IO.MemoryStream (,[byte[]][System.Convert]::FromBase64String('
AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAAAgCgAAAk1TRnQBSQFMAgEBAgEAAegBAAHoAQABIgEAARoBAAT/AQkBAAj/AUIBTQE2
AQQGAAE2AQQCAAEoAwABiAMAARoDAAEBAQABCAUAAdABDRgAAYACAAGAAwACgAEAAYADAAGAAQAB
gAEAAoACAAPAAQABwAHcAcABAAHwAcoBpgEAATMFAAEzAQABMwEAATMBAAIzAgADFgEAAxwBAAMi
AQADKQEAA1UBAANNAQADQgEAAzkBAAGAAXwB/wEAAlAB/wEAAZMBAAHWAQAB/wHsAcwBAAHGAdYB
7wEAAdYC5wEAAZABqQGtAgAB/wEzAwABZgMAAZkDAAHMAgABMwMAAjMCAAEzAWYCAAEzAZkCAAEz
AcwCAAEzAf8CAAFmAwABZgEzAgACZgIAAWYBmQIAAWYBzAIAAWYB/wIAAZkDAAGZATMCAAGZAWYC
AAKZAgABmQHMAgABmQH/AgABzAMAAcwBMwIAAcwBZgIAAcwBmQIAAswCAAHMAf8CAAH/AWYCAAH/
AZkCAAH/AcwBAAEzAf8CAAH/AQABMwEAATMBAAFmAQABMwEAAZkBAAEzAQABzAEAATMBAAH/AQAB
/wEzAgADMwEAAjMBZgEAAjMBmQEAAjMBzAEAAjMB/wEAATMBZgIAATMBZgEzAQABMwJmAQABMwFm
AZkBAAEzAWYBzAEAATMBZgH/AQABMwGZAgABMwGZATMBAAEzAZkBZgEAATMCmQEAATMBmQHMAQAB
MwGZAf8BAAEzAcwCAAEzAcwBMwEAATMBzAFmAQABMwHMAZkBAAEzAswBAAEzAcwB/wEAATMB/wEz
AQABMwH/AWYBAAEzAf8BmQEAATMB/wHMAQABMwL/AQABZgMAAWYBAAEzAQABZgEAAWYBAAFmAQAB
mQEAAWYBAAHMAQABZgEAAf8BAAFmATMCAAFmAjMBAAFmATMBZgEAAWYBMwGZAQABZgEzAcwBAAFm
ATMB/wEAAmYCAAJmATMBAANmAQACZgGZAQACZgHMAQABZgGZAgABZgGZATMBAAFmAZkBZgEAAWYC
mQEAAWYBmQHMAQABZgGZAf8BAAFmAcwCAAFmAcwBMwEAAWYBzAGZAQABZgLMAQABZgHMAf8BAAFm
Af8CAAFmAf8BMwEAAWYB/wGZAQABZgH/AcwBAAHMAQAB/wEAAf8BAAHMAQACmQIAAZkBMwGZAQAB
mQEAAZkBAAGZAQABzAEAAZkDAAGZAjMBAAGZAQABZgEAAZkBMwHMAQABmQEAAf8BAAGZAWYCAAGZ
AWYBMwEAAZkBMwFmAQABmQFmAZkBAAGZAWYBzAEAAZkBMwH/AQACmQEzAQACmQFmAQADmQEAApkB
zAEAApkB/wEAAZkBzAIAAZkBzAEzAQABZgHMAWYBAAGZAcwBmQEAAZkCzAEAAZkBzAH/AQABmQH/
AgABmQH/ATMBAAGZAcwBZgEAAZkB/wGZAQABmQH/AcwBAAGZAv8BAAHMAwABmQEAATMBAAHMAQAB
ZgEAAcwBAAGZAQABzAEAAcwBAAGZATMCAAHMAjMBAAHMATMBZgEAAcwBMwGZAQABzAEzAcwBAAHM
ATMB/wEAAcwBZgIAAcwBZgEzAQABmQJmAQABzAFmAZkBAAHMAWYBzAEAAZkBZgH/AQABzAGZAgAB
zAGZATMBAAHMAZkBZgEAAcwCmQEAAcwBmQHMAQABzAGZAf8BAALMAgACzAEzAQACzAFmAQACzAGZ
AQADzAEAAswB/wEAAcwB/wIAAcwB/wEzAQABmQH/AWYBAAHMAf8BmQEAAcwB/wHMAQABzAL/AQAB
zAEAATMBAAH/AQABZgEAAf8BAAGZAQABzAEzAgAB/wIzAQAB/wEzAWYBAAH/ATMBmQEAAf8BMwHM
AQAB/wEzAf8BAAH/AWYCAAH/AWYBMwEAAcwCZgEAAf8BZgGZAQAB/wFmAcwBAAHMAWYB/wEAAf8B
mQIAAf8BmQEzAQAB/wGZAWYBAAH/ApkBAAH/AZkBzAEAAf8BmQH/AQAB/wHMAgAB/wHMATMBAAH/
AcwBZgEAAf8BzAGZAQAB/wLMAQAB/wHMAf8BAAL/ATMBAAHMAf8BZgEAAv8BmQEAAv8BzAEAAmYB
/wEAAWYB/wFmAQABZgL/AQAB/wJmAQAB/wFmAf8BAAL/AWYBAAEhAQABpQEAA18BAAN3AQADhgEA
A5YBAAPLAQADsgEAA9cBAAPdAQAD4wEAA+oBAAPxAQAD+AEAAfAB+wH/AQABpAKgAQADgAMAAf8C
AAH/AwAC/wEAAf8DAAH/AQAB/wEAAv8CAAP/AQBE9EQARPREABL0AfMf9AHwEfREABD0AfIBEwES
HvQB/wEOAewQ9EQAD/QB8wEOAREB9x70Af8BEQFmAQ8P9EQADfQB/wFtAQAB3AEVIPQBFQK0AQAB
7AH/DPREAAz0AfEBEQGuAtwBDwH/H/QB7AGLAtwBbAFDAfIL9EQAC/QB7AEQAbQC3AHWARMB/xL0
AQcB9wEHAfAB8wj0AfABZgPcAbQBDwHsCvREAAn0AfIB6gFmBNwBrgHsBPQB8wHxAbwCBwGSAesB
EwEQAfMF9AHqARQBFQFDARABDgEPARUBbQHsAe8BBwG8AfEBDwXcAWYBEgHxCPREAAj0AfIBDgGu
BdwBFQHqAW0BQwEOAQADDgFDAWwBzwHWAdwBAAHyBfQB6gEJB9wBtAGuAWYDDgbcAbQBAAG8B/RE
AAb0Af8BbQEAAdYG3AK0AbUBCQrcAQAB8gX0AeoBCRXcAREBQwH/BfREAAX0AfEBEQGuFtwBAAHy
BfQB6gEJFtwBtAEQAe8E9EQABPQB7AERAbQX3AEAAfIF9AHqAQkX3AG0AQAB/wP0RAAE9AHqARUB
tBfcAQAB8gX0AeoBCRbcAbQBEAHvBPREAAX0AfABDgGuFtwBAAHyBfQB6gEJFdwBFQERAf8B8wT0
RAAH9AFtAQ4H3AHWDdwBAAHyBfQB6gEJBtwBtAGuAWwBEQMOBtwBtAEAAe8H9EQACPQBBwERAa4F
3AMVAQ8BDgEQAUMBFQFmAYsBrgG0AtwBAAHyBfQB6gJDAREBDwEOAREBEgHsAfcCBwHwAfIBDwXc
AWYBFQHwCPREAAn0AfIB6gFmBNwBrgHsAf8C9AHzAfABBwH3AuwBbQETAREBDgHyBfQBvAHvAbwB
8Qn0AfEBZgPcAbQBFQHsAfMJ9EQAC/QB9wEOAbQC3AHWARMB/wn0A/8T9AHsAWwC3AG0AQ8B7wv0
RAAM9AH/AhUC3AEPAf8f9AEVAa4B3AEVAUMB/wz0RAAO9AHvAQABtQFmAfMf9AERAbQBAAHvDvRE
AA/0AfEBEAEOAe0e9AH/AQ4BQwHwD/REABH0Auwf9AHsAfMQ9EQARPREAET0RABE9EQAAUIBTQE+
BwABPgMAASgDAAGIAwABGgMAAQEBAAEBBQABCAECFgAD//8A/wALAAs='))
	#endregion
	$imagelist1.ImageStream = $Formatter_binaryFomatter.Deserialize($System_IO_MemoryStream)
	$Formatter_binaryFomatter = $null
	$System_IO_MemoryStream = $null
	$imagelist1.TransparentColor = 'Transparent'
	#
	# contextmenustripTranslate
	#
	[void]$contextmenustripTranslate.Items.Add($очиститьToolStripMenuItem)
	$contextmenustripTranslate.Name = "contextmenustrip1"
	$contextmenustripTranslate.ShowImageMargin = $False
	$contextmenustripTranslate.Size = '36, 4'
	#
	# очиститьToolStripMenuItem
	#
	$очиститьToolStripMenuItem.Name = "очиститьToolStripMenuItem"
	$очиститьToolStripMenuItem.Size = '101, 22'
	$очиститьToolStripMenuItem.Text = "Очистить"
	$очиститьToolStripMenuItem.add_Click($очиститьToolStripMenuItem_Click)
	#
	# contextmenustripHistory
	#
	[void]$contextmenustripHistory.Items.Add($удалитьToolStripMenuItem)
	[void]$contextmenustripHistory.Items.Add($toolstripseparator1)
	[void]$contextmenustripHistory.Items.Add($удалитьВсеToolStripMenuItem)
	$contextmenustripHistory.Name = "contextmenustripHistory"
	$contextmenustripHistory.ShowImageMargin = $False
	$contextmenustripHistory.Size = '159, 54'
	#
	# удалитьToolStripMenuItem
	#
	$удалитьToolStripMenuItem.Name = "удалитьToolStripMenuItem"
	$удалитьToolStripMenuItem.Size = '158, 22'
	$удалитьToolStripMenuItem.Text = "Удалить выделеные"
	$удалитьToolStripMenuItem.add_Click($удалитьToolStripMenuItem_Click)
	#
	# toolstripseparator1
	#
	$toolstripseparator1.Name = "toolstripseparator1"
	$toolstripseparator1.Size = '155, 6'
	#
	# удалитьВсеToolStripMenuItem
	#
	$удалитьВсеToolStripMenuItem.Name = "удалитьВсеToolStripMenuItem"
	$удалитьВсеToolStripMenuItem.Size = '158, 22'
	$удалитьВсеToolStripMenuItem.Text = "Удалить все"
	$удалитьВсеToolStripMenuItem.add_Click($удалитьВсеToolStripMenuItem_Click)
	$groupboxSearchHistory.ResumeLayout($false)
	$tabpage3.ResumeLayout($false)
	$groupbox2.ResumeLayout($false)
	$groupbox3.ResumeLayout($false)
	$tabpage2.ResumeLayout($false)
	$groupbox1.ResumeLayout($false)
	$groupbox5.ResumeLayout($false)
	$trackbar1.EndInit()
	$groupbox4.ResumeLayout($false)
	$trackbar2.EndInit()
	$groupbox6.ResumeLayout($false)
	$tabpage1.ResumeLayout($false)
	$tabcontrol1.ResumeLayout($false)
	$MainForm.ResumeLayout($false)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()
}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	$script:ApplicationVersion = '1.0.0.8'
	
	$UpdateServer = 'wgo-it000000601'
	$UpdatePage = '/software/yandex_translate'
	$UpdateDescription = ''
	
	$script:Executable = [System.Windows.Forms.Application]::ExecutablePath
	$script:Languages = @{
		албанский = 'sq'
		английский = 'en'
		арабский = 'ar'
		армянский = 'hy'
		азербайджанский = 'az'
		африкаанс = 'af'
		баскский = 'eu'
		белорусский = 'be'
		болгарский = 'bg'
		боснийский = 'bs'
		валлийский = 'cy'
		вьетнамский = 'vi'
		венгерский = 'hu'
		'гаитянский (креольский)' = 'ht'
		галисийский = 'gl'
		голландский = 'nl'
		греческий = 'el'
		грузинский = 'ka'
		датский = 'da'
		иврит = 'he'
		индонезийский = 'id'
		ирландский = 'ga'
		итальянский = 'it'
		исландский = 'is'
		испанский = 'es'
		казахский = 'kk'
		каталанский = 'ca'
		киргизский = 'ky'
		китайский = 'zh'
		корейский = 'ko'
		латынь = 'la'
		латышский = 'lv'
		литовский = 'lt'
		малагасийский = 'mg'
		малайский = 'ms'
		мальтийский = 'mt'
		македонский = 'mk'
		монгольский = 'mn'
		немецкий = 'de'
		норвежский = 'no'
		персидский = 'fa'
		польский = 'pl'
		португальский = 'pt'
		румынский = 'ro'
		русский = 'ru'
		сербский = 'sr'
		словацкий = 'sk'
		словенский = 'sl'
		суахили = 'sw'
		таджикский = 'tg'
		тайский = 'th'
		тагальский = 'tl'
		татарский = 'tt'
		турецкий = 'tr'
		узбекский = 'uz'
		украинский = 'uk'
		финский = 'fi'
		французский = 'fr'
		хорватский = 'hr'
		чешский = 'cs'
		шведский = 'sv'
		эстонский = 'et'
		японский = 'ja'
	}
	
	function Set-MissingRegistryItems
	{
		@('History', 'General', 'Configuration', 'Configuration\Common', 'Configuration\Settings') | % {
			$Path = 'HKCU:\Software\PK-Tools\Yandex Translate\' + $_
			if ((Test-Path $Path) -eq $false)
			{
				[void](New-Item -Path $Path -Force)
			}
		}
	}
	
	function New-RegistryKeys
	{
		param ([switch]$New, [switch]$ClearHistory)
		if ($New)
		{
			[void](New-Item -Path 'HKCU:\Software\PK-Tools\Yandex Translate' -Force)
			[void](New-Item -Path 'HKCU:\Software\PK-Tools\Yandex Translate\History' -Force)
			[void](New-Item -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Force)
			[void](New-Item -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration' -Force)
			[void](New-Item -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Common' -Force)
			[void](New-Item -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Name Version -Value $script:ApplicationVersion -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Name Update -Value 0 -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Name UpdateServer -Value $UpdateServer -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Name UpdatePage -Value $UpdatePage -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Name UpdateDescription -Value $UpdateDescription -PropertyType String -Force)
		}
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Common' -Name KeepConfiguration -Value False -PropertyType String -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name API_Key -Value '' -PropertyType String -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name Proxy -Value False -PropertyType String -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name TopMost -Value False -PropertyType String -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name Encoding -Value 'UTF8' -PropertyType String -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name FontSizeText -Value 8 -PropertyType String -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name FontSizeTranslate -Value 8 -PropertyType String -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name TranslateFrom -Value 'английский' -PropertyType String -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name TranslateTo -Value 'русский' -PropertyType String -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name TranslateDirection -Value 1 -PropertyType String -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name Width -Value 450 -PropertyType String -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name Height -Value 450 -PropertyType String -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name SplitterPosition -Value 180 -PropertyType String -Force)
		[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name SaveHistory -Value False -PropertyType String -Force)
	}
	
	function Set-TopMost
	{
		if ($checkboxПоверхВсехОкон.Checked)
		{ $MainForm.TopMost = $true }
		else
		{ $MainForm.TopMost = $false }
	}
	
	function Check-Updates
	{
		[version]$current = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Name Version | Select -ExpandProperty Version
		if ([version]$script:ApplicationVersion -gt [version]$current)
		{ [void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Name Version -Value $script:ApplicationVersion -PropertyType String -Force) }
		$arguments = $UpdatePage
		Add-JobTracker -Name "Update" `
					   -JobScript {
			Param ($1)
			$nc = New-Object -TypeName System.Net.WebClient
			$nc.UseDefaultCredentials = $true
			$nc.Proxy.Credentials = $nc.Credentials
			[version]$check = $nc.DownloadString("http://$(Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Name UpdateServer | Select -ExpandProperty UpdateServer)$1/version.txt")
			[version]$current = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Name Version | Select -ExpandProperty Version
			if ($check -gt $current)
			{ $nc.DownloadString("http://$(Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Name UpdateServer | Select -ExpandProperty UpdateServer)$1/description.txt") }
			else
			{ [void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Name Update -Value 0 -PropertyType String -Force) }
		}`
					   -CompletedScript {
			Param ($Job)
			$result = Receive-Job -Job $Job
			if ($result)
			{
				Call-update_notification_psf -Title 'Обновление' -DescriptionLabel 'Описание' -DescriptionText $result -UpdateLabel 'Доступна новая версия!'
				[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\General' -Name Update -Value 1 -PropertyType String -Force)
			}
		} -ArgumentList $arguments
		
	}
	
	function Set-Registry
	{
		if ($checkboxСохранятьНастройки.Checked)
		{
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Common' -Name KeepConfiguration -Value $($checkboxСохранятьНастройки.Checked) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name API_Key -Value $($textbox1.Text.Trim()) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name Proxy -Value $($checkboxИспользоватьПроксиСе.Checked) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name TopMost -Value $($checkboxПоверхВсехОкон.Checked) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name Encoding -Value $($combobox3.SelectedItem) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name FontSizeText -Value $($trackbar1.Value) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name FontSizeTranslate -Value $($trackbar2.Value) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name TranslateFrom -Value $($combobox1.SelectedItem) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name TranslateTo -Value $($combobox2.SelectedItem) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name TranslateDirection -Value $($label1.ImageIndex) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name Width -Value $($MainForm.Size.Width) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name Height -Value $($MainForm.Size.Height) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name SplitterPosition -Value $($splitter1.SplitPosition) -PropertyType String -Force)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name SaveHistory -Value $($checkboxСохранятьИсториюПоис.Checked) -PropertyType String -Force)
		}
		else
		{
			New-RegistryKeys
		}
	}
	
	function Load-Registry
	{
		if ((Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Common' -Name KeepConfiguration | Select -ExpandProperty KeepConfiguration) -eq $true)
		{
			$textbox1.Text = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name API_Key | Select -ExpandProperty API_Key
			$combobox3.SelectedItem = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name Encoding | Select -ExpandProperty Encoding
			$trackbar1.Value = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name FontSizeText | Select -ExpandProperty FontSizeText
			$trackbar2.Value = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name FontSizeTranslate | Select -ExpandProperty FontSizeTranslate
			
			$Width = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name Width | Select -ExpandProperty Width
			$Height = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name Height | Select -ExpandProperty Height
			$MainForm.Size = New-Object System.Drawing.Size($Width, $Height)
			$MainForm.Location = New-Object System.Drawing.Point((([System.Windows.Forms.Screen]::PrimaryScreen.WorkingArea.Width - $MainForm.Width) / 2), (([System.Windows.Forms.Screen]::PrimaryScreen.WorkingArea.Height - $MainForm.Height) / 2))
			
			$splitter1.SplitPosition = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name SplitterPosition | Select -ExpandProperty SplitterPosition
			
			if ((Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Common' -Name KeepConfiguration | Select -ExpandProperty KeepConfiguration) -eq $true)
			{ $checkboxСохранятьНастройки.Checked = $true }
			else
			{ $checkboxСохранятьНастройки.Checked = $false }
			if ((Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name Proxy | Select -ExpandProperty Proxy) -eq $true)
			{ $checkboxИспользоватьПроксиСе.Checked = $true }
			else
			{ $checkboxИспользоватьПроксиСе.Checked = $false }
			if ((Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name TopMost | Select -ExpandProperty TopMost) -eq $true)
			{ $checkboxПоверхВсехОкон.Checked = $true }
			else
			{ $checkboxПоверхВсехОкон.Checked = $false }
			if ((Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name SaveHistory | Select -ExpandProperty SaveHistory) -eq $true)
			{ $checkboxСохранятьИсториюПоис.Checked = $true }
			else
			{ $checkboxСохранятьИсториюПоис.Checked = $false }
			$combobox1.SelectedItem = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name TranslateFrom | Select -ExpandProperty TranslateFrom
			$combobox2.SelectedItem = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name TranslateTo | Select -ExpandProperty TranslateTo
			$label1.ImageIndex = Get-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\Configuration\Settings' -Name TranslateDirection | Select -ExpandProperty TranslateDirection
		}
	}
	
	function Set-TranslateLanguage
	{
		$combobox1.Items.Clear()
		$script:Languages.Keys | Sort-Object | % { Load-ComboBox -ComboBox $combobox1 -Items $_ -Append }
		$combobox2.Items.Clear()
		$script:Languages.Keys | Sort-Object | % { Load-ComboBox -ComboBox $combobox2 -Items $_ -Append }
		$combobox1.SelectedItem = 'английский'
		$combobox2.SelectedItem = 'русский'
	}
	
	function Load-ComboBox
	{
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	function Add-JobTracker
	{
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[string]$Name,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[ScriptBlock]$JobScript,
			$ArgumentList = $null,
			[ScriptBlock]$CompletedScript,
			[ScriptBlock]$UpdateScript)
		
		$job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
		
		if ($job -ne $null)
		{
			$members = @{
				"Job" = $Job;
				"CompleteScript" = $CompletedScript;
				"UpdateScript" = $UpdateScript
			}
			
			$psObject = New-Object System.Management.Automation.PSObject -Property $members
			
			[void]$JobTrackerList.Add($psObject)
			
			if (-not $timerJobTracker.Enabled)
			{
				$timerJobTracker.Start()
			}
		}
		elseif ($CompletedScript -ne $null)
		{
			Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
		}
		
	}
	
	function Update-JobTracker
	{
		$timerJobTracker.Stop()
		
		for ($index = 0; $index -lt $JobTrackerList.Count; $index++)
		{
			$psObject = $JobTrackerList[$index]
			
			if ($psObject -ne $null)
			{
				if ($psObject.Job -ne $null)
				{
					if ($psObject.Job.State -ne "Running")
					{
						if ($psObject.CompleteScript -ne $null)
						{
							Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
						}
						
						$JobTrackerList.RemoveAt($index)
						Remove-Job -Job $psObject.Job
						$index--
					}
					elseif ($psObject.UpdateScript -ne $null)
					{
						Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
					}
				}
			}
			else
			{
				$JobTrackerList.RemoveAt($index)
				$index--
			}
		}
		
		if ($JobTrackerList.Count -gt 0)
		{
			$timerJobTracker.Start()
		}
	}
	
	function Stop-JobTracker
	{
		$timerJobTracker.Stop()
		while ($JobTrackerList.Count -gt 0)
		{
			$job = $JobTrackerList[0].Job
			$JobTrackerList.RemoveAt(0)
			Stop-Job $job
			Remove-Job $job
		}
	}
	
	function Get-Encoding
	{
		'UTF8', 'Unicode', 'ASCII', 'Default' | % { Load-ComboBox -ComboBox $combobox3 -Items $_ -Append }
		if (-not $($checkboxСохранятьНастройки.Checked))
		{ $combobox3.SelectedIndex = 0 }
	}
	
	function Invoke-MessageBox
	{
		param ($Text, $Caption)
		[void][System.Windows.Forms.MessageBox]::Show($Text, $Caption)
	}
	
	function SearchGrid()
	{
		$RowIndex = 0
		$ColumnIndex = 0
		$seachString = $textboxSearch.Text
		
		if ($seachString -eq "")
		{
			return
		}
		
		if ($datagridviewHistory.SelectedCells.Count -ne 0)
		{
			$startCell = $datagridviewHistory.SelectedCells[0];
			$RowIndex = $startCell.RowIndex
			$ColumnIndex = $startCell.ColumnIndex + 1
		}
		
		$columnCount = $datagridviewHistory.ColumnCount
		$rowCount = $datagridviewHistory.RowCount
		for (; $RowIndex -lt $rowCount; $RowIndex++)
		{
			$Row = $datagridviewHistory.Rows[$RowIndex]
			
			for (; $ColumnIndex -lt $columnCount; $ColumnIndex++)
			{
				$cell = $Row.Cells[$ColumnIndex]
				
				if ($cell.Value -ne $null -and $cell.Value.ToString().IndexOf($seachString, [StringComparison]::OrdinalIgnoreCase) -ne -1)
				{
					$datagridviewHistory.CurrentCell = $cell
					return
				}
			}
			
			$ColumnIndex = 0
		}
		
		$datagridviewHistory.CurrentCell = $null
		[void][System.Windows.Forms.MessageBox]::Show('Поиск достиг конца таблицы.', 'Строка не найдена')
	}
	
	function Get-TranslateItem
	{
		$text = $((((((((((((($converted.Translation.text) -replace ' ESCH11 ', ' # ') -replace ' ESCH12 ', ' #') -replace ' ESCH13 ', '# ') -replace ' ESCH14 ', '#') -replace ' ESCH21 ', ' ; ') -replace ' ESCH22 ', ' ;') -replace ' ESCH23 ', '; ') -replace ' ESCH24 ', ';') -replace ' ESCH31 ', ' & ') -replace ' ESCH32 ', ' &') -replace ' ESCH33 ', '& ') -replace ' ESCH34 ', '&')
		$richtextbox2.AppendText($text)
		if ($checkboxСохранятьИсториюПоис.Checked -eq $true)
		{
			$dictionary_item = @(
			$now = [DateTime]::Now
			(Get-Date $now).ToShortDateString(),
			(Get-Date $now).ToLongTimeString(),
			$($script:Languages.GetEnumerator() | Where-Object { $_.Value -eq $script:from } | Select-Object -Expand Name),
			$($script:Languages.GetEnumerator() | Where-Object { $_.Value -eq $script:to } | Select-Object -Expand Name),
			$($richtextbox1.Text.Trim()),
			$($richtextbox2.Text.Trim())
			)
			[void](New-ItemProperty -Path 'HKCU:\Software\PK-Tools\Yandex Translate\History' -Name $((Get-Date $now).ToShortDateString() + ' ' + (Get-Date $now).ToLongTimeString()) -Value $(($dictionary_item | % { Convert-TextToBinary $_ }) -join ',') -PropertyType String -Force)
		}
	}
	
	function Set-ColumnsWidth
	{
		$datagridviewHistory.Columns[0].AutoSizeMode = 'DisplayedCells'
		$datagridviewHistory.Columns[1].AutoSizeMode = 'DisplayedCells'
		$datagridviewHistory.Columns[2].AutoSizeMode = 'DisplayedCells'
		$datagridviewHistory.Columns[3].AutoSizeMode = 'DisplayedCells'
		$datagridviewHistory.Columns[4].AutoSizeMode = 'Fill'
		$datagridviewHistory.Columns[5].AutoSizeMode = 'Fill'
	}
	
	function Convert-TextToBinary
	{
		[cmdletbinding()]
		Param (
			[parameter(ValueFromPipeLine = 'True')]
			[string]$Text
		)
		Begin
		{
			[string[]]$BinaryArray = @()
		}
		Process
		{
			$TextArray = $Text.ToCharArray()
			
			ForEach ($a in $TextArray)
			{
				$BinaryArray += ([convert]::ToString([int][char]$a, 2)).PadLeft(8, '0')
			}
		}
		End
		{
			[string]::Join(' ', $BinaryArray)
		}
	}
	
	function ConvertTo-DataTable
	{
		[CmdLetBinding(DefaultParameterSetName = "None")]
		param (
			[Parameter(Position = 0, Mandatory = $true)][System.Array]$Source,
			[Parameter(Position = 1, ParameterSetName = 'Like')][String]$Match = ".+",
			[Parameter(Position = 2, ParameterSetName = 'NotLike')][String]$NotMatch = ".+"
		)
		if ($NotMatch -eq ".+")
		{
			$Columns = $Source[0] | Select * | Get-Member -MemberType NoteProperty | Where-Object { $_.Name -match "($Match)" }
		}
		else
		{
			$Columns = $Source[0] | Select * | Get-Member -MemberType NoteProperty | Where-Object { $_.Name -notmatch "($NotMatch)" }
		}
		$DataTable = New-Object System.Data.DataTable
		foreach ($Column in @('Дата', 'Время', 'Перевод из', 'Перевод в', 'Текст', 'Перевод'))
		{
			$DataTable.Columns.Add("$($Column)") | Out-Null
		}
		
		foreach ($Entry in $Source)
		{
			$Row = $DataTable.NewRow()
			foreach ($Column in @('Дата', 'Время', 'Перевод из', 'Перевод в', 'Текст', 'Перевод'))
			{
				$Row["$($Column)"] = if ($Entry.$Column -ne $null) { ($Entry | Select-Object -ExpandProperty $Column) -join ', ' }
				else { $null }
			}
			$DataTable.Rows.Add($Row)
		}
		Return, $DataTable
	}
	
	function Set-CommandLineParameters
	{
		if (@('Continue', 'SilentlyContinue', 'Stop') -contains $script:Dictionary["EA"])
		{ $script:ErrorActionPreference = $script:Dictionary["EA"] }
		else
		{ $script:ErrorActionPreference = 'SilentlyContinue' }
	}
	
	function Parse-Commandline
	{
		
		[OutputType([System.Collections.Specialized.StringCollection])]
		Param ([string]$CommandLine)
		
		$Arguments = New-Object System.Collections.Specialized.StringCollection
		
		if ($CommandLine)
		{
			$index = $CommandLine.IndexOf('"')
			
			while ($index -ne -1)
			{
				$closeIndex = $CommandLine.IndexOf('"', $index + 1)
				if ($closeIndex -eq -1)
				{
					break
				}
				$value = $CommandLine.Substring($index + 1, $closeIndex – ($index + 1))
				[void]$Arguments.Add($value)
				$index = $closeIndex
				
				$index = $CommandLine.IndexOf('"', $index + 1)
			}
		}
		return $Arguments
	}
	
	function Convert-CommandLineToDictionary
	{
		Param ([ValidateNotNull()]
			[System.Collections.Specialized.StringDictionary]$Dictionary,
			[string]$CommandLine,
			[char] $ParamIndicator)
		
		$Params = Parse-Commandline $CommandLine
		
		for ($index = 0; $index -lt $Params.Count; $index++)
		{
			[string]$param = $Params[$index]
			$key = ""
			$value = ""
			
			if ($param.StartsWith($ParamIndicator))
			{
				$key = $param.Remove(0, 1)
				if ($index + 1 -lt $Params.Count)
				{
					[string]$param = $Params[$index + 1]
					if ($param.StartsWith($ParamIndicator) -ne $true)
					{
						$value = $param
						$index++
					}
				}
				$Dictionary[$key] = $value
			}
		}
	}#endregion Source: Globals.ps1

#region Source: update_notification.psf
function Call-update_notification_psf
{
Param ($Title, $DescriptionLabel, $DescriptionText, $UpdateLabel)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formUpdate = New-Object 'System.Windows.Forms.Form'
	$richtextboxDescription = New-Object 'System.Windows.Forms.RichTextBox'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonUpdateExecutable = New-Object 'System.Windows.Forms.Button'
	$progressbar1 = New-Object 'System.Windows.Forms.ProgressBar'
	$labelDescription = New-Object 'System.Windows.Forms.Label'
	$labelNewVersionAvailable = New-Object 'System.Windows.Forms.Label'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	$formUpdate_Load = {
		$formUpdate.TopMost = $true
		$formUpdate.Text = $Title
		$labelNewVersionAvailable.Text = $UpdateLabel
		$labelDescription.Text = $DescriptionLabel
		$richtextboxDescription.Text = $DescriptionText
	}
	
	$buttonUpdateExecutable_Click = {
		$buttonUpdateExecutable.Visible = $false
		$progressbar1.Visible = $true
		
		$filename = [System.IO.Path]::GetFileName($script:Executable)
		$src = 'http:\\' + $UpdateServer + $UpdatePage + '\YandexTranslate.exe'
		$dst = [System.IO.Path]::GetTempFileName()
		$arguments = $src, $dst
		
		Add-JobTracker -Name "DownloadUpdate" `
					   -JobScript {
			param ($1, $2)
			try
			{
				$nc = New-Object -TypeName System.Net.WebClient
				$nc.UseDefaultCredentials = $true
				$nc.Proxy.Credentials = $nc.Credentials
				$nc.DownloadFile($1, $2)
				Write-Output $true
			}
			catch [Exception]
			{
				Write-Output $null
			}
			
		}`
					   -CompletedScript {
			Param ($Job)
			$result = Receive-Job -Job $Job
			if ($result)
			{
				try
				{
					$arguments = '/c "timeout 1 > nul & move /Y "' + $dst + '" "' + $script:Executable + '" > nul & timeout 1 > nul & start "" /min "' + $script:Executable + '""'
					[System.Diagnostics.Process]::Start('cmd', $arguments)
					$MainForm.Dispose()
					
				}
				catch [Exception]
				{
					#Remove-Item $dst -Force
					[void][System.Windows.Forms.MessageBox]::Show(("Ошибка обновления файла.`n`nВыполните загрузку и обновление вручную`n`n" + $src), "Ошибка")
				}
			}
			else
			{
				[void][System.Windows.Forms.MessageBox]::Show(("Ошибка загрузки файла.`n`nВыполните загрузку вручную`n`n" + $src), "Ошибка")
			}
			$progressbar1.Visible = $false
			$buttonUpdateExecutable.Visible = $true
		} -ArgumentList $arguments
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formUpdate.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:update_notification_richtextboxDescription = $richtextboxDescription.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonUpdateExecutable.remove_Click($buttonUpdateExecutable_Click)
			$formUpdate.remove_Load($formUpdate_Load)
			$formUpdate.remove_Load($Form_StateCorrection_Load)
			$formUpdate.remove_Closing($Form_StoreValues_Closing)
			$formUpdate.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formUpdate.SuspendLayout()
	$groupbox1.SuspendLayout()
	#
	# formUpdate
	#
	$formUpdate.Controls.Add($richtextboxDescription)
	$formUpdate.Controls.Add($groupbox1)
	$formUpdate.ClientSize = '404, 316'
	$formUpdate.FormBorderStyle = 'SizableToolWindow'
	$formUpdate.MaximizeBox = $False
	$formUpdate.MinimizeBox = $False
	$formUpdate.MinimumSize = '420, 270'
	$formUpdate.Name = "formUpdate"
	$formUpdate.ShowIcon = $False
	$formUpdate.StartPosition = 'CenterScreen'
	$formUpdate.Text = "Update"
	$formUpdate.add_Load($formUpdate_Load)
	#
	# richtextboxDescription
	#
	$richtextboxDescription.Dock = 'Fill'
	$richtextboxDescription.Location = '0, 100'
	$richtextboxDescription.Name = "richtextboxDescription"
	$richtextboxDescription.ReadOnly = $True
	$richtextboxDescription.Size = '404, 216'
	$richtextboxDescription.TabIndex = 1
	$richtextboxDescription.Text = ""
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($buttonUpdateExecutable)
	$groupbox1.Controls.Add($progressbar1)
	$groupbox1.Controls.Add($labelDescription)
	$groupbox1.Controls.Add($labelNewVersionAvailable)
	$groupbox1.Dock = 'Top'
	$groupbox1.Location = '0, 0'
	$groupbox1.Name = "groupbox1"
	$groupbox1.Size = '404, 100'
	$groupbox1.TabIndex = 4
	$groupbox1.TabStop = $False
	#
	# buttonUpdateExecutable
	#
	$buttonUpdateExecutable.Anchor = 'Top, Left, Right'
	$buttonUpdateExecutable.Font = "Microsoft Sans Serif, 9.25pt"
	$buttonUpdateExecutable.Location = '102, 44'
	$buttonUpdateExecutable.Name = "buttonUpdateExecutable"
	$buttonUpdateExecutable.Size = '200, 23'
	$buttonUpdateExecutable.TabIndex = 5
	$buttonUpdateExecutable.Text = "Update Executable"
	$buttonUpdateExecutable.UseVisualStyleBackColor = $True
	$buttonUpdateExecutable.add_Click($buttonUpdateExecutable_Click)
	#
	# progressbar1
	#
	$progressbar1.Anchor = 'Top, Left, Right'
	$progressbar1.Location = '102, 44'
	$progressbar1.Name = "progressbar1"
	$progressbar1.Size = '200, 23'
	$progressbar1.Style = 'Marquee'
	$progressbar1.TabIndex = 4
	#
	# labelDescription
	#
	$labelDescription.Dock = 'Bottom'
	$labelDescription.Font = "Microsoft Sans Serif, 9.75pt"
	$labelDescription.Location = '3, 70'
	$labelDescription.Name = "labelDescription"
	$labelDescription.Size = '398, 27'
	$labelDescription.TabIndex = 3
	$labelDescription.Text = "Description:"
	$labelDescription.TextAlign = 'MiddleCenter'
	#
	# labelNewVersionAvailable
	#
	$labelNewVersionAvailable.Dock = 'Top'
	$labelNewVersionAvailable.Font = "Microsoft Sans Serif, 12pt"
	$labelNewVersionAvailable.Location = '3, 16'
	$labelNewVersionAvailable.Name = "labelNewVersionAvailable"
	$labelNewVersionAvailable.Size = '398, 23'
	$labelNewVersionAvailable.TabIndex = 2
	$labelNewVersionAvailable.Text = "New version available!"
	$labelNewVersionAvailable.TextAlign = 'MiddleCenter'
	$groupbox1.ResumeLayout($false)
	$formUpdate.ResumeLayout($false)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formUpdate.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formUpdate.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formUpdate.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formUpdate.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formUpdate.ShowDialog()
}
#endregion Source: update_notification.psf

#region Source: about.psf
function Call-about_psf
{
Param ($Version, $UpdateServer, $UpdatePage)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formAbout = New-Object 'System.Windows.Forms.Form'
	$linklabelUpdate = New-Object 'System.Windows.Forms.LinkLabel'
	$buttonCheckForUpdate = New-Object 'System.Windows.Forms.Button'
	$labelVersion = New-Object 'System.Windows.Forms.Label'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	$formAbout_Load={
		$labelVersion.Text = 'Version: ' + $Version
		$linklabelUpdate.Text = 'http://' + $UpdateServer + $UpdatePage
	}
	
	$buttonCheckForUpdate_Click = {
		$this.Enabled = $false
		Check-Updates
		$this.Enabled = $true
	}
	$linklabelUpdate_LinkClicked=[System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
		[System.Diagnostics.Process]::Start($this.Text)
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formAbout.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$linklabelUpdate.remove_LinkClicked($linklabelUpdate_LinkClicked)
			$buttonCheckForUpdate.remove_Click($buttonCheckForUpdate_Click)
			$formAbout.remove_Load($formAbout_Load)
			$formAbout.remove_Load($Form_StateCorrection_Load)
			$formAbout.remove_Closing($Form_StoreValues_Closing)
			$formAbout.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formAbout.SuspendLayout()
	#
	# formAbout
	#
	$formAbout.Controls.Add($linklabelUpdate)
	$formAbout.Controls.Add($buttonCheckForUpdate)
	$formAbout.Controls.Add($labelVersion)
	$formAbout.ClientSize = '410, 86'
	$formAbout.FormBorderStyle = 'FixedDialog'
	$formAbout.MaximizeBox = $False
	$formAbout.MinimizeBox = $False
	$formAbout.Name = "formAbout"
	$formAbout.ShowIcon = $False
	$formAbout.StartPosition = 'CenterScreen'
	$formAbout.Text = "About"
	$formAbout.TopMost = $True
	$formAbout.add_Load($formAbout_Load)
	#
	# linklabelUpdate
	#
	$linklabelUpdate.Location = '6, 28'
	$linklabelUpdate.Name = "linklabelUpdate"
	$linklabelUpdate.Size = '398, 23'
	$linklabelUpdate.TabIndex = 2
	$linklabelUpdate.TextAlign = 'MiddleCenter'
	$linklabelUpdate.add_LinkClicked($linklabelUpdate_LinkClicked)
	#
	# buttonCheckForUpdate
	#
	$buttonCheckForUpdate.Location = '6, 57'
	$buttonCheckForUpdate.Name = "buttonCheckForUpdate"
	$buttonCheckForUpdate.Size = '398, 23'
	$buttonCheckForUpdate.TabIndex = 1
	$buttonCheckForUpdate.Text = "Check For Update"
	$buttonCheckForUpdate.UseVisualStyleBackColor = $True
	$buttonCheckForUpdate.add_Click($buttonCheckForUpdate_Click)
	#
	# labelVersion
	#
	$labelVersion.Location = '6, 5'
	$labelVersion.Name = "labelVersion"
	$labelVersion.Size = '398, 23'
	$labelVersion.TabIndex = 0
	$labelVersion.Text = "Version"
	$labelVersion.TextAlign = 'MiddleCenter'
	$formAbout.ResumeLayout($false)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formAbout.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formAbout.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formAbout.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formAbout.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formAbout.ShowDialog()
}
#endregion Source: about.psf

#Start the application
Main ($CommandLine)
